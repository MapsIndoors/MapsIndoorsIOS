#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef MAPSINDOORSCORE_SWIFT_H
#define MAPSINDOORSCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapsIndoorsCore_Private;
@import ObjectiveC;
@import UIKit;
#endif

#import <MapsIndoorsCore/MapsIndoorsCore.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapsIndoorsCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class CoreBounds;
@class CorePoint;
@class CorePolygon;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore18MPGeometryProtocol_")
@protocol MPGeometryProtocol
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore10CoreBounds")
@interface CoreBounds : NSObject <MPGeometryProtocol>
- (nonnull instancetype)initWithSouthWest:(CLLocationCoordinate2D)southWest northEast:(CLLocationCoordinate2D)northEast OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CLLocationCoordinate2D northEast;
@property (nonatomic, readonly) CLLocationCoordinate2D southWest;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly) double area;
- (CoreBounds * _Nonnull)expandWithCoord:(CLLocationCoordinate2D)coord SWIFT_WARN_UNUSED_RESULT;
- (CoreBounds * _Nonnull)expandWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore9CorePoint")
@interface CorePoint : NSObject <MPGeometryProtocol>
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
- (double)bearingToPoint:(CorePoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore11CorePolygon")
@interface CorePolygon : NSObject
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
- (void)appendWithPoint:(CLLocationCoordinate2D)point;
@property (nonatomic, readonly) double area;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore12CorePolyline")
@interface CorePolyline : NSObject
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
- (void)appendWithPoint:(CLLocationCoordinate2D)point;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore10CoreRegion")
@interface CoreRegion : NSObject <MPGeometryProtocol>
@property (nonatomic, readonly) CLLocationCoordinate2D nearLeft;
@property (nonatomic, readonly) CLLocationCoordinate2D farLeft;
@property (nonatomic, readonly) CLLocationCoordinate2D farRight;
@property (nonatomic, readonly) CLLocationCoordinate2D nearRight;
- (nonnull instancetype)initWithNearLeft:(CLLocationCoordinate2D)nearLeft farLeft:(CLLocationCoordinate2D)farLeft farRight:(CLLocationCoordinate2D)farRight nearRight:(CLLocationCoordinate2D)nearRight OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly) double area;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore15InfoWindowUtils")
@interface InfoWindowUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MPCameraPosition;
@protocol MPProjection;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPCameraOperator_")
@protocol MPCameraOperator
- (void)moveWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;
- (void)animateWithPos:(id <MPCameraPosition> _Nonnull)pos;
- (void)animateWithBounds:(CoreBounds * _Nonnull)bounds;
- (void)animateWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;
@property (nonatomic, readonly, strong) id <MPCameraPosition> _Nonnull position;
@property (nonatomic, readonly, strong) id <MPProjection> _Nonnull projection;
- (id <MPCameraPosition> _Nonnull)cameraFor:(CoreBounds * _Nonnull)bounds inserts:(UIEdgeInsets)inserts SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPCameraPosition_")
@protocol MPCameraPosition
@property (nonatomic, readonly) CLLocationCoordinate2D target;
@property (nonatomic, readonly) float zoom;
@property (nonatomic, readonly) CLLocationDirection bearing;
@property (nonatomic, readonly) double viewingAngle;
- (id <MPCameraPosition> _Nullable)cameraWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraPosition> _Nullable)cameraInitWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom bearing:(CLLocationDirection)bearing viewingAngle:(double)viewingAngle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore14MPCameraUpdate_")
@protocol MPCameraUpdate
- (id <MPCameraUpdate> _Nonnull)fitBounds:(CoreBounds * _Nonnull)bounds SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraUpdate> _Nonnull)fitBoundsWithPadding:(CoreBounds * _Nonnull)bounds padding:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraUpdate> _Nonnull)fitBoundsWithEdgeInserts:(CoreBounds * _Nonnull)bounds edgeInsets:(UIEdgeInsets)edgeInsets SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MPCameraViewFitMode, open) {
  MPCameraViewFitModeNORTH_ALIGNED = 0,
  MPCameraViewFitModeFIRST_STEP_ALIGNED = 1,
  MPCameraViewFitModeSTART_TO_END_ALIGNED = 2,
};

/// The different ways to handle collisions of icons and labels on the map.
typedef SWIFT_ENUM(NSInteger, MPCollisionHandling, open) {
/// Will allow markers to overlap, nothing will be removed.
  MPCollisionHandlingAllowOverLap = 0,
/// Will hide labels if they are overlapping with another feature such as an icon or another label.
  MPCollisionHandlingRemoveLabelFirst = 1,
/// Will hide icons if they are overlapping with another feature such as an icon or another label.
  MPCollisionHandlingRemoveIconFirst = 2,
/// Will hide markers if they are overlapping with another marker.
  MPCollisionHandlingRemoveIconAndLabel = 3,
};


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore28MPDirectionsRendererDelegate_")
@protocol MPDirectionsRendererDelegate
- (void)onDirectionsRendererChangedFloorWithFloorIndex:(NSInteger)floorIndex;
@end

@class MPRoute;
@class UIColor;
@class UIImage;
@class MPDirectionsRendererContextualInfoSettings;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore28MPDirectionsRendererProtocol_")
@protocol MPDirectionsRendererProtocol
/// Assigns (or unassigns) a route object
@property (nonatomic, strong) MPRoute * _Nonnull route;
/// Index of the route leg that will be rendered. If set to something negative, rendering will be disabled.
@property (nonatomic) NSUInteger routeLegIndex;
/// Foreground color of the rendered route leg/step.
@property (nonatomic, strong) UIColor * _Nonnull pathColor;
/// Background color of the rendered route leg/step. The background color will be visible during animation.
@property (nonatomic, strong) UIColor * _Nonnull pathBackgroundColor;
/// If set to YES, the map viewport will be adjusted to fit the rendered route leg/step.
@property (nonatomic) BOOL fitBounds;
/// Bounds fitting mode.
@property (nonatomic) enum MPCameraViewFitMode fitMode;
/// Intentional padding for bounds fitting. The rendering is not guaranteed to respect the specified padding.
@property (nonatomic) UIEdgeInsets padding;
/// Indicates whether the renderer is currently showing a route or not.
@property (nonatomic, readonly) BOOL isRenderingRoute;
/// Custom images to use for representing the action points. The first image will be used as the start image. The image at position N in the array will be used at the end of the leg with index N-1, as well as the end of the last step of the leg with index N-1.
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull actionPointImages;
/// Start animation of the route leg/step with given duration. Starting with a <code>backgroundColor</code> route leg/step the polyline will be gradually stroked from start to end with the <code>solidColor</code> at the speed of <code>leg/step length / duration</code>.
/// @param duration Duration in seconds.
- (void)animateWithDuration:(NSTimeInterval)duration;
/// Set this property to show labels and icons from nearby Locations as additional contextual information about the start and end positions of the rendered route segment.
@property (nonatomic, strong) MPDirectionsRendererContextualInfoSettings * _Nonnull contextualInfoSettings;
/// Clear rendering of current route. The route is still present and can be redrawn.
- (void)clear;
/// Advance to the next route leg. Advancement will stop at the last leg.
/// @returns YES if the task can be performed, NO if not.
- (BOOL)nextLeg SWIFT_WARN_UNUSED_RESULT;
/// Go back to the previous route leg. It will stop at the first leg.
/// @returns YES if the task can be performed, NO if not.
- (BOOL)previousLeg SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore30MPOnRouteMarkerClickedDelegate_")
@protocol MPOnRouteMarkerClickedDelegate
- (void)onRouteMarkerClickedWithTag:(NSString * _Nonnull)tag;
@end

@class MPMapControl;

SWIFT_CLASS("_TtC15MapsIndoorsCore25MPDirectionsRendererSwift")
@interface MPDirectionsRendererSwift : NSObject <MPOnRouteMarkerClickedDelegate>
@property (nonatomic, readonly) BOOL isRouteShown;
@property (nonatomic) enum MPCameraViewFitMode fitMode;
@property (nonatomic, strong) id <MPDirectionsRendererDelegate> _Nullable delegate;
@property (nonatomic, strong) MPDirectionsRendererContextualInfoSettings * _Nullable contextualInfoSettings;
@property (nonatomic) UIEdgeInsets padding;
@property (nonatomic) BOOL fitBounds;
@property (nonatomic, strong) UIColor * _Nullable pathColor;
@property (nonatomic) NSInteger routeLegIndex;
@property (nonatomic, strong) MPRoute * _Nullable route;
- (nonnull instancetype)initWithMapControl:(MPMapControl * _Nonnull)mapControl OBJC_DESIGNATED_INITIALIZER;
- (void)clear;
- (BOOL)nextLeg SWIFT_WARN_UNUSED_RESULT;
- (BOOL)previousLeg SWIFT_WARN_UNUSED_RESULT;
- (void)animateWithDuration:(NSTimeInterval)duration;
- (void)onRouteMarkerClickedWithTag:(NSString * _Nonnull)tag;
- (void)update;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// This class represents a Display Rule, a MapsIndoors concept which describes a number of styling values for MapsIndoors objects. The values contained within dictates how the MapsIndoors SDK renders a given object on the map (POI, area, selection, model, etc.). Display Rule data can be edited through the MapsIndoors CMS, and can be modified at runtime in SDKs. Invoke <code>reset</code> on a <code>MPDisplayRule</code> to reset all values to those from the CMS.
SWIFT_CLASS("_TtC15MapsIndoorsCore13MPDisplayRule")
@interface MPDisplayRule : NSObject
/// Defines the look of the outline around the currently selected building.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPDisplayRule * _Nonnull buildingOutline;)
+ (MPDisplayRule * _Nonnull)buildingOutline SWIFT_WARN_UNUSED_RESULT;
+ (void)setBuildingOutline:(MPDisplayRule * _Nonnull)value;
/// The marker icon to use on markers that apply to the display rule.
@property (nonatomic, strong) UIImage * _Nonnull icon;
/// Size of the icon image.
@property (nonatomic) CGSize iconSize;
/// URL to the marker icon to use.
@property (nonatomic, copy) NSURL * _Nullable iconURL;
/// Whether or not to show an icon.
@property (nonatomic) BOOL iconVisible;
/// The label to show for the marker. It can be a fixed string or a label template, e.g. <code>"{{name}}"</code>, <code>"{{roomId}}"</code>, <code>"Room #{{roomId}}"</code> etc..
@property (nonatomic, copy) NSString * _Nullable label;
/// Maximum width in points of the label shown on the map. If the text shown in the label
/// (typically the Location name) is longer than the labelMaxWidth the text will flow onto as many
/// lines as needed.
@property (nonatomic) NSUInteger labelMaxWidth;
/// Whether or not to show a text label. See <code>label</code> property.
@property (nonatomic) BOOL labelVisible;
@property (nonatomic) double labelZoomFrom;
@property (nonatomic) double labelZoomTo;
/// Defines the look of highlighting a point of interest when selecting it.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPDisplayRule * _Nonnull locationHighlight;)
+ (MPDisplayRule * _Nonnull)locationHighlight SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocationHighlight:(MPDisplayRule * _Nonnull)value;
/// The bearing of the 2D model. The value is the rotation in degrees clockwise from north.
@property (nonatomic) double model2DBearing;
/// The height of the 2D model. The value is in meters to make it easy to associate with the real world.
@property (nonatomic) double model2DHeightMeters;
/// The URL of the image for the 2D model.
@property (nonatomic, copy) NSString * _Nullable model2DModel;
/// Determines the visibility of the 2D model.
@property (nonatomic) BOOL model2DVisible;
/// The width of the 2D model. The value is in meters to make it easy to associate with the real world.
@property (nonatomic) double model2DWidthMeters;
/// The 2D model zoom value from dictates from which zoom level the model should start being shown.
@property (nonatomic) double model2DZoomFrom;
/// The 2D model zoom to value dictates from which zoom level the model should stop being shown.
@property (nonatomic) double model2DZoomTo;
/// Name/identifier of the rule. Also used as the rule condition for the location types.
@property (nonatomic, copy) NSString * _Nullable name;
/// The fill color of the polygon drawn on the map.
@property (nonatomic, strong) UIColor * _Nullable polygonFillColor;
/// The stroke color of the polygon drawn on the map.
@property (nonatomic, strong) UIColor * _Nullable polygonStrokeColor;
/// The stroke width of the polygon drawn on the map.
@property (nonatomic) double polygonStrokeWidth;
/// Whether or not to show the location polygon on the map.
@property (nonatomic) BOOL polygonVisible;
/// The map zoom level above which the location polygon should be visible.
@property (nonatomic) double polygonZoomFrom;
/// The map zoom level beneath which the location marker should be visible.
@property (nonatomic) double polygonZoomTo;
/// Should anything be shown at the zoom level
- (BOOL)showAtZoom:(double)zoom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPDisplayRule * _Nonnull userPosition;)
+ (MPDisplayRule * _Nonnull)userPosition SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserPosition:(MPDisplayRule * _Nonnull)value;
/// Whether or not to show the marker.
@property (nonatomic) BOOL visible;
/// The map zoom level above which the location marker should be visible.
@property (nonatomic) double zoomFrom;
/// The map zoom level beneath which the location marker should be visible.
@property (nonatomic) double zoomTo;
- (nonnull instancetype)initWithRule:(MPDisplayRule * _Nonnull)rule parent:(MPDisplayRule * _Nonnull)parent;
- (nonnull instancetype)initWithRule:(MPDisplayRule * _Nonnull)rule;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Resets the DisplayRule to the original state.
- (void)reset;
/// Populate with data via JSONModel.
/// Should never be used from outside the MapsIndoors SDK.
- (nullable instancetype)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

@protocol MPTileLayer;
@class MPVenue;
@class MPFloor;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPFloorTileLayer_")
@protocol MPFloorTileLayer
@property (nonatomic, readonly, strong) id <MPTileLayer> _Nonnull layer;
- (nullable instancetype)initWithVenue:(MPVenue * _Nonnull)venue andFloor:(MPFloor * _Nonnull)floor;
@end



@protocol MPMapProvider;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore11MPMapConfig_")
@protocol MPMapConfig
@property (nonatomic, readonly, strong) id <MPMapProvider> _Nonnull mapProvider;
@end

@class UIView;
@protocol MPMapProviderDelegate;
@protocol MPPositionPresenter;
@protocol MPUtils;
@protocol MPTileLayerClass;
@class MPViewModelProducer;
@protocol MPTileProvider;
@protocol MPRouteRenderer;
@class NSBundle;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore13MPMapProvider_")
@protocol MPMapProvider
@property (nonatomic, readonly, strong) UIView * _Nullable view;
@property (nonatomic) UIEdgeInsets padding;
@property (nonatomic) BOOL MPaccessibilityElementsHidden;
@property (nonatomic, strong) id <MPMapProviderDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) id <MPPositionPresenter> _Nonnull positionPresenter;
@property (nonatomic, readonly, strong) id <MPUtils> _Nonnull utils;
@property (nonatomic, readonly, strong) id <MPTileLayerClass> _Nonnull tileLayerClass;
- (void)showInfoWindow:(BOOL)shouldShowInfowindow locationID:(NSString * _Nonnull)locationID;
@property (nonatomic, readonly, strong) id <MPCameraOperator> _Nonnull cameraOperator;
- (void)setViewModelsWithProducer:(MPViewModelProducer * _Nonnull)producer;
- (void)setTileProviderWithTileProvider:(id <MPTileProvider> _Nonnull)tileProvider;
- (void)reloadTilesForFloorChange;
@property (nonatomic, readonly, strong) id <MPRouteRenderer> _Nonnull routeRenderer;
- (void)applyBundle:(NSBundle * _Nonnull)bundle;
@end

@class MPMapExtend;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore21MPMapProviderDelegate_")
@protocol MPMapProviderDelegate
- (void)didTapAtCoordinateDelegateWithCoordinates:(CLLocationCoordinate2D)coordinates mapExtend:(MPMapExtend * _Nonnull)mapExtend zoom:(float)zoom distanceLimit:(double)distanceLimit areaLimit:(double)areaLimit;
- (void)didChangeCameraPositionDelegate;
- (void)mapViewDidFinishTileRenderingDelegate;
@end




SWIFT_CLASS("_TtC15MapsIndoorsCore20MPPositionController")
@interface MPPositionController : NSObject
@property (nonatomic) NSInteger floorIndex;
@property (nonatomic) NSInteger userFloorIndex;
@property (nonatomic, strong) UIImage * _Nonnull markerIcon;
- (nonnull instancetype)initWithMapConfig:(id <MPMapConfig> _Nonnull)mapConfig OBJC_DESIGNATED_INITIALIZER;
- (void)redrawUserLocation;
- (void)setUserPosition:(CLLocationCoordinate2D)position floorIndex:(NSInteger)floorIndex accuracy:(double)accuracy heading:(double)heading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MPPositionResult;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore19MPPositionPresenter_")
@protocol MPPositionPresenter
@property (nonatomic) BOOL optionalisVisible;
@property (nonatomic, strong) MPPositionResult * _Nonnull position;
- (void)redrawUserLocationWithCurrentFloorIndex:(NSInteger)currentFloorIndex userFloorIndex:(NSInteger)userFloorIndex icon:(UIImage * _Nonnull)icon;
- (void)setUserLocationWithPosition:(CLLocationCoordinate2D)position floorIndex:(NSInteger)floorIndex accuracy:(double)accuracy heading:(double)heading;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore12MPProjection_")
@protocol MPProjection
@property (nonatomic, readonly, strong) CoreRegion * _Nonnull visibleRegion;
- (CGPoint)pointForCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (CLLocationCoordinate2D)coordinateForPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
@end

@class MPGraphNode;
@class NSCoder;
@class NSData;
@class JSONModelError;

SWIFT_CLASS("_TtC15MapsIndoorsCore24MPRouteNetworkEntryPoint")
@interface MPRouteNetworkEntryPoint : MPPoint
@property (nonatomic, readonly) MPBoundaryType boundaryType;
@property (nonatomic, copy) NSString * _Nullable label;
+ (MPRouteNetworkEntryPoint * _Nonnull)newWithEntryPointNode:(MPGraphNode * _Nonnull)entryNode SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithData:(NSData * _Null_unspecified)data error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)initWithLat:(double)latitude lon:(double)longitude SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLat:(double)latitude lon:(double)longitude zValue:(double)z SWIFT_UNAVAILABLE;
- (null_unspecified instancetype)initWithString:(NSString * _Null_unspecified)string error:(JSONModelError * _Nullable * _Null_unspecified)err SWIFT_UNAVAILABLE;
- (null_unspecified instancetype)initWithString:(NSString * _Null_unspecified)string usingEncoding:(NSUInteger)encoding error:(JSONModelError * _Nullable * _Null_unspecified)err SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RouteViewModelProducer;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore15MPRouteRenderer_")
@protocol MPRouteRenderer
- (void)applyWithModel:(RouteViewModelProducer * _Nonnull)model animate:(BOOL)animate duration:(NSTimeInterval)duration repeating:(BOOL)repeating primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor primaryWidth:(float)primaryWidth secondaryWidth:(float)secondaryWidth;
- (void)moveCameraWithPoints:(NSArray<NSValue *> * _Nonnull)points animate:(BOOL)animate durationMs:(NSInteger)durationMs tilt:(float)tilt fitMode:(enum MPCameraViewFitMode)fitMode;
- (void)clear;
- (void)setOnRouteMarkerClickedDelegateWithDelegate:(id <MPOnRouteMarkerClickedDelegate> _Nonnull)delegate;
@end


/// MPSolutionConfig is the way to access the Solution settings made in the MapsIndoors CMS.
/// MPSolutionConfig governs solution level settings such as:
/// <ul>
///   <li>
///     Marker clustering
///   </li>
///   <li>
///     Marker collision handling
///   </li>
///   <li>
///     Main Display Rule
///   </li>
///   <li>
///     MPSettings3D
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MapsIndoorsCore16MPSolutionConfig")
@interface MPSolutionConfig : NSObject
@property (nonatomic) BOOL enableClustering;
@property (nonatomic) enum MPCollisionHandling collisionHandling;
@property (nonatomic, readonly, strong) MPDisplayRule * _Nonnull mainDisplayRule;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull settings3D;
/// Populate with data via JSONModel.
/// Should never be used from outside the MapsIndoors SDK.
- (MPSolutionConfig * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore11MPTileLayer_")
@protocol MPTileLayer
@property (nonatomic) NSInteger zIndex;
@property (nonatomic) NSInteger tileSize;
@property (nonatomic) float opacity;
@property (nonatomic) BOOL fadeIn;
- (void)clearLayerCache;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPTileLayerClass_")
@protocol MPTileLayerClass
- (id <MPTileLayer> _Nonnull)tileLayer SWIFT_WARN_UNUSED_RESULT;
- (void)clearTileCache;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore14MPTileProvider_")
@protocol MPTileProvider
- (UIImage * _Nullable)getTileWithX:(NSUInteger)x y:(NSUInteger)y zoom:(NSUInteger)zoom SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)templateUrl SWIFT_WARN_UNUSED_RESULT;
- (double)tileSize SWIFT_WARN_UNUSED_RESULT;
- (void)clearMap;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore7MPUtils_")
@protocol MPUtils
/// Returns the initial heading (degrees clockwise of North) at |from| of the shortest path to |to|.
/// The returned value is in the range [0, 360).
/// Returns 0 if the two coordinates are the same.
/// Both coordinates must be valid.
/// To get the final heading at |to| one may use (GMSGeometryHeading(|to|, |from|) + 180) modulo 360.
- (CLLocationDirection)MPGeometryHeadingFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to SWIFT_WARN_UNUSED_RESULT;
/// Returns the great circle distance between two coordinates, in meters, on Earth.
/// This is the shortest distance between the two coordinates on the sphere.
/// Both coordinates must be valid.
- (CLLocationDistance)MPGeometryDistanceFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to SWIFT_WARN_UNUSED_RESULT;
/// Returns whether |point| lies inside of path. The path is always considered closed, regardless of
/// whether the last point equals the first or not.
/// Inside is defined as not containing the South Pole – the South Pole is always outside.
/// |path| describes great circle segments if |geodesic| is YES, and rhumb (loxodromic) segments
/// otherwise.
/// If |point| is exactly equal to one of the vertices, the result is YES. A point that is not equal
/// to a vertex is on one side or the other of any path segment – it can never be “exactly on the
/// border”.
/// See GMSGeometryIsLocationOnPath() for a border test with tolerance.
- (BOOL)MPGeometryContainsLocationWithPoint:(CLLocationCoordinate2D)point path:(NSArray<NSValue *> * _Nonnull)path geodesic:(BOOL)geodesic SWIFT_WARN_UNUSED_RESULT;
/// Returns the area of a geodesic polygon defined by |path| on Earth.
/// The “inside” of the polygon is defined as not containing the South pole.
/// If |path| is not closed, it is implicitly treated as a closed path nevertheless and the result is
/// the same.
/// All coordinates of the path must be valid.
/// The polygon must be simple (not self-overlapping) and may be concave.
/// If any segment of the path is a pair of antipodal points, the result is undefined – because two
/// antipodal points do not form a unique great circle segment on the sphere.
- (double)MPGeometryArea:(NSArray<NSValue *> * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Returns the great circle length of |path|, in meters, on Earth.
/// This is the sum of GMSGeometryDistance() over the path segments.
/// All the coordinates of the path must be valid.
- (CLLocationDistance)MPGeometryLength:(NSArray<NSValue *> * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Returns the signed area of a geodesic polygon defined by |path| on Earth.
/// The result has the same absolute value as GMSGeometryArea(); it is positive if the points of path
/// are in counter-clockwise order, and negative otherwise.
/// The same restrictions as on GMSGeometryArea() apply.
- (double)MPGeometrySignedArea:(NSArray<NSValue *> * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Returns the coordinate that lies the given |fraction| of the way between the |from| and |to|
///   </li>
///   <li>
///     coordinates on the shortest path between the two.
///   </li>
///   <li>
///   </li>
///   <li>
///     The resulting longitude is in the range [-180, 180).
///   </li>
/// </ul>
- (CLLocationCoordinate2D)MPGeometryInterpolateFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to fraction:(double)fraction SWIFT_WARN_UNUSED_RESULT;
- (CLLocationCoordinate2D)calculateProjCoordWithCoordinateP:(CLLocationCoordinate2D)coordinateP coordinateU:(CLLocationCoordinate2D)coordinateU coordinateV:(CLLocationCoordinate2D)coordinateV SWIFT_WARN_UNUSED_RESULT;
@end

@class MPLocation;

SWIFT_CLASS("_TtC15MapsIndoorsCore19MPViewModelProducer")
@interface MPViewModelProducer : NSObject
- (nonnull instancetype)initWithLocations:(NSArray<MPLocation *> * _Nonnull)locations mapControl:(MPMapControl * _Nonnull)mapControl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore22RouteViewModelProducer")
@interface RouteViewModelProducer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore12TileProvider")
@interface TileProvider : NSObject <MPTileProvider>
- (void)clearMap;
- (nonnull instancetype)initWithVenue:(MPVenue * _Nonnull)venue floor:(MPFloor * _Nonnull)floor tileSize:(NSInteger)tileSize OBJC_DESIGNATED_INITIALIZER;
- (UIImage * _Nullable)getTileWithX:(NSUInteger)x y:(NSUInteger)y zoom:(NSUInteger)zoom SWIFT_WARN_UNUSED_RESULT;
- (double)tileSize SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)templateUrl SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef MAPSINDOORSCORE_SWIFT_H
#define MAPSINDOORSCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import MapsIndoorsCore_Private;
@import ObjectiveC;
@import UIKit;
#endif

#import <MapsIndoorsCore/MapsIndoorsCore.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapsIndoorsCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class CoreBounds;
@class CorePoint;
@class CorePolygon;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore18MPGeometryProtocol_")
@protocol MPGeometryProtocol
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore10CoreBounds")
@interface CoreBounds : NSObject <MPGeometryProtocol>
- (nonnull instancetype)initWithSouthWest:(CLLocationCoordinate2D)southWest northEast:(CLLocationCoordinate2D)northEast OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CLLocationCoordinate2D northEast;
@property (nonatomic, readonly) CLLocationCoordinate2D southWest;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly) double area;
- (CoreBounds * _Nonnull)expandWithCoord:(CLLocationCoordinate2D)coord SWIFT_WARN_UNUSED_RESULT;
- (CoreBounds * _Nonnull)expandWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore9CorePoint")
@interface CorePoint : NSObject <MPGeometryProtocol>
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
- (double)bearingToPoint:(CorePoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore11CorePolygon")
@interface CorePolygon : NSObject
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
- (void)appendWithPoint:(CLLocationCoordinate2D)point;
@property (nonatomic, readonly) double area;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore12CorePolyline")
@interface CorePolyline : NSObject
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
- (void)appendWithPoint:(CLLocationCoordinate2D)point;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore10CoreRegion")
@interface CoreRegion : NSObject <MPGeometryProtocol>
@property (nonatomic, readonly) CLLocationCoordinate2D nearLeft;
@property (nonatomic, readonly) CLLocationCoordinate2D farLeft;
@property (nonatomic, readonly) CLLocationCoordinate2D farRight;
@property (nonatomic, readonly) CLLocationCoordinate2D nearRight;
- (nonnull instancetype)initWithNearLeft:(CLLocationCoordinate2D)nearLeft farLeft:(CLLocationCoordinate2D)farLeft farRight:(CLLocationCoordinate2D)farRight nearRight:(CLLocationCoordinate2D)nearRight OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) CoreBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) CorePoint * _Nonnull center;
@property (nonatomic, readonly, strong) CorePolygon * _Nonnull polygon;
@property (nonatomic, readonly) double area;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore15InfoWindowUtils")
@interface InfoWindowUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MPCameraPosition;
@protocol MPProjection;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPCameraOperator_")
@protocol MPCameraOperator
- (void)moveWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;
- (void)animateWithPos:(id <MPCameraPosition> _Nonnull)pos;
- (void)animateWithBounds:(CoreBounds * _Nonnull)bounds;
- (void)animateWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;
@property (nonatomic, readonly, strong) id <MPCameraPosition> _Nonnull position;
@property (nonatomic, readonly, strong) id <MPProjection> _Nonnull projection;
- (id <MPCameraPosition> _Nonnull)cameraFor:(CoreBounds * _Nonnull)bounds inserts:(UIEdgeInsets)inserts SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPCameraPosition_")
@protocol MPCameraPosition
@property (nonatomic, readonly) CLLocationCoordinate2D target;
@property (nonatomic, readonly) float zoom;
@property (nonatomic, readonly) CLLocationDirection bearing;
@property (nonatomic, readonly) double viewingAngle;
- (id <MPCameraPosition> _Nullable)cameraWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraPosition> _Nullable)cameraInitWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom bearing:(CLLocationDirection)bearing viewingAngle:(double)viewingAngle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore14MPCameraUpdate_")
@protocol MPCameraUpdate
- (id <MPCameraUpdate> _Nonnull)fitBounds:(CoreBounds * _Nonnull)bounds SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraUpdate> _Nonnull)fitBoundsWithPadding:(CoreBounds * _Nonnull)bounds padding:(CGFloat)padding SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraUpdate> _Nonnull)fitBoundsWithEdgeInserts:(CoreBounds * _Nonnull)bounds edgeInsets:(UIEdgeInsets)edgeInsets SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MPCameraViewFitMode, open) {
  MPCameraViewFitModeNORTH_ALIGNED = 0,
  MPCameraViewFitModeFIRST_STEP_ALIGNED = 1,
  MPCameraViewFitModeSTART_TO_END_ALIGNED = 2,
};

/// The different ways to handle collisions of icons and labels on the map.
typedef SWIFT_ENUM(NSInteger, MPCollisionHandling, open) {
/// Will allow markers to overlap, nothing will be removed.
  MPCollisionHandlingAllowOverLap = 0,
/// Will hide labels if they are overlapping with another feature such as an icon or another label.
  MPCollisionHandlingRemoveLabelFirst = 1,
/// Will hide icons if they are overlapping with another feature such as an icon or another label.
  MPCollisionHandlingRemoveIconFirst = 2,
/// Will hide markers if they are overlapping with another marker.
  MPCollisionHandlingRemoveIconAndLabel = 3,
};


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore28MPDirectionsRendererDelegate_")
@protocol MPDirectionsRendererDelegate
- (void)onDirectionsRendererChangedFloorWithFloorIndex:(NSInteger)floorIndex;
@end

@class MPRoute;
@class UIColor;
@class UIImage;
@class MPDirectionsRendererContextualInfoSettings;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore28MPDirectionsRendererProtocol_")
@protocol MPDirectionsRendererProtocol
/// Assigns (or unassigns) a route object
@property (nonatomic, strong) MPRoute * _Nonnull route;
/// Index of the route leg that will be rendered. If set to something negative, rendering will be disabled.
@property (nonatomic) NSUInteger routeLegIndex;
/// Foreground color of the rendered route leg/step.
@property (nonatomic, strong) UIColor * _Nonnull pathColor;
/// Background color of the rendered route leg/step. The background color will be visible during animation.
@property (nonatomic, strong) UIColor * _Nonnull pathBackgroundColor;
/// If set to YES, the map viewport will be adjusted to fit the rendered route leg/step.
@property (nonatomic) BOOL fitBounds;
/// Bounds fitting mode.
@property (nonatomic) enum MPCameraViewFitMode fitMode;
/// Intentional padding for bounds fitting. The rendering is not guaranteed to respect the specified padding.
@property (nonatomic) UIEdgeInsets padding;
/// Indicates whether the renderer is currently showing a route or not.
@property (nonatomic, readonly) BOOL isRenderingRoute;
/// Custom images to use for representing the action points. The first image will be used as the start image. The image at position N in the array will be used at the end of the leg with index N-1, as well as the end of the last step of the leg with index N-1.
@property (nonatomic, copy) NSArray<UIImage *> * _Nonnull actionPointImages;
/// Start animation of the route leg/step with given duration. Starting with a <code>backgroundColor</code> route leg/step the polyline will be gradually stroked from start to end with the <code>solidColor</code> at the speed of <code>leg/step length / duration</code>.
/// @param duration Duration in seconds.
- (void)animateWithDuration:(NSTimeInterval)duration;
/// Set this property to show labels and icons from nearby Locations as additional contextual information about the start and end positions of the rendered route segment.
@property (nonatomic, strong) MPDirectionsRendererContextualInfoSettings * _Nonnull contextualInfoSettings;
/// Clear rendering of current route. The route is still present and can be redrawn.
- (void)clear;
/// Advance to the next route leg. Advancement will stop at the last leg.
/// @returns YES if the task can be performed, NO if not.
- (BOOL)nextLeg SWIFT_WARN_UNUSED_RESULT;
/// Go back to the previous route leg. It will stop at the first leg.
/// @returns YES if the task can be performed, NO if not.
- (BOOL)previousLeg SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore30MPOnRouteMarkerClickedDelegate_")
@protocol MPOnRouteMarkerClickedDelegate
- (void)onRouteMarkerClickedWithTag:(NSString * _Nonnull)tag;
@end

@class MPMapControl;

SWIFT_CLASS("_TtC15MapsIndoorsCore25MPDirectionsRendererSwift")
@interface MPDirectionsRendererSwift : NSObject <MPOnRouteMarkerClickedDelegate>
@property (nonatomic, readonly) BOOL isRouteShown;
@property (nonatomic) enum MPCameraViewFitMode fitMode;
@property (nonatomic, strong) id <MPDirectionsRendererDelegate> _Nullable delegate;
@property (nonatomic, strong) MPDirectionsRendererContextualInfoSettings * _Nullable contextualInfoSettings;
@property (nonatomic) UIEdgeInsets padding;
@property (nonatomic) BOOL fitBounds;
@property (nonatomic, strong) UIColor * _Nullable pathColor;
@property (nonatomic) NSInteger routeLegIndex;
@property (nonatomic, strong) MPRoute * _Nullable route;
- (nonnull instancetype)initWithMapControl:(MPMapControl * _Nonnull)mapControl OBJC_DESIGNATED_INITIALIZER;
- (void)clear;
- (BOOL)nextLeg SWIFT_WARN_UNUSED_RESULT;
- (BOOL)previousLeg SWIFT_WARN_UNUSED_RESULT;
- (void)animateWithDuration:(NSTimeInterval)duration;
- (void)onRouteMarkerClickedWithTag:(NSString * _Nonnull)tag;
- (void)update;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// This class represents a Display Rule, a MapsIndoors concept which describes a number of styling values for MapsIndoors objects. The values contained within dictates how the MapsIndoors SDK renders a given object on the map (POI, area, selection, model, etc.). Display Rule data can be edited through the MapsIndoors CMS, and can be modified at runtime in SDKs. Invoke <code>reset</code> on a <code>MPDisplayRule</code> to reset all values to those from the CMS.
SWIFT_CLASS("_TtC15MapsIndoorsCore13MPDisplayRule")
@interface MPDisplayRule : NSObject
/// Defines the look of the outline around the currently selected building.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPDisplayRule * _Nonnull buildingOutline;)
+ (MPDisplayRule * _Nonnull)buildingOutline SWIFT_WARN_UNUSED_RESULT;
+ (void)setBuildingOutline:(MPDisplayRule * _Nonnull)value;
/// The marker icon to use on markers that apply to the display rule.
@property (nonatomic, strong) UIImage * _Nonnull icon;
/// Size of the icon image.
@property (nonatomic) CGSize iconSize;
/// URL to the marker icon to use.
@property (nonatomic, copy) NSURL * _Nullable iconURL;
/// Whether or not to show an icon.
@property (nonatomic) BOOL iconVisible;
/// The label to show for the marker. It can be a fixed string or a label template, e.g. <code>"{{name}}"</code>, <code>"{{roomId}}"</code>, <code>"Room #{{roomId}}"</code> etc..
@property (nonatomic, copy) NSString * _Nullable label;
/// Maximum width in points of the label shown on the map. If the text shown in the label
/// (typically the Location name) is longer than the labelMaxWidth the text will flow onto as many
/// lines as needed.
@property (nonatomic) NSUInteger labelMaxWidth;
/// Whether or not to show a text label. See <code>label</code> property.
@property (nonatomic) BOOL labelVisible;
@property (nonatomic) double labelZoomFrom;
@property (nonatomic) double labelZoomTo;
/// Defines the look of highlighting a point of interest when selecting it.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPDisplayRule * _Nonnull locationHighlight;)
+ (MPDisplayRule * _Nonnull)locationHighlight SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocationHighlight:(MPDisplayRule * _Nonnull)value;
/// The bearing of the 2D model. The value is the rotation in degrees clockwise from north.
@property (nonatomic) double model2DBearing;
/// The height of the 2D model. The value is in meters to make it easy to associate with the real world.
@property (nonatomic) double model2DHeightMeters;
/// The URL of the image for the 2D model.
@property (nonatomic, copy) NSString * _Nullable model2DModel;
/// Determines the visibility of the 2D model.
@property (nonatomic) BOOL model2DVisible;
/// The width of the 2D model. The value is in meters to make it easy to associate with the real world.
@property (nonatomic) double model2DWidthMeters;
/// The 2D model zoom value from dictates from which zoom level the model should start being shown.
@property (nonatomic) double model2DZoomFrom;
/// The 2D model zoom to value dictates from which zoom level the model should stop being shown.
@property (nonatomic) double model2DZoomTo;
/// Name/identifier of the rule. Also used as the rule condition for the location types.
@property (nonatomic, copy) NSString * _Nullable name;
/// The fill color of the polygon drawn on the map.
@property (nonatomic, strong) UIColor * _Nullable polygonFillColor;
/// The stroke color of the polygon drawn on the map.
@property (nonatomic, strong) UIColor * _Nullable polygonStrokeColor;
/// The stroke width of the polygon drawn on the map.
@property (nonatomic) double polygonStrokeWidth;
/// Whether or not to show the location polygon on the map.
@property (nonatomic) BOOL polygonVisible;
/// The map zoom level above which the location polygon should be visible.
@property (nonatomic) double polygonZoomFrom;
/// The map zoom level beneath which the location marker should be visible.
@property (nonatomic) double polygonZoomTo;
/// Should anything be shown at the zoom level
- (BOOL)showAtZoom:(double)zoom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPDisplayRule * _Nonnull userPosition;)
+ (MPDisplayRule * _Nonnull)userPosition SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserPosition:(MPDisplayRule * _Nonnull)value;
/// Whether or not to show the marker.
@property (nonatomic) BOOL visible;
/// The map zoom level above which the location marker should be visible.
@property (nonatomic) double zoomFrom;
/// The map zoom level beneath which the location marker should be visible.
@property (nonatomic) double zoomTo;
- (nonnull instancetype)initWithRule:(MPDisplayRule * _Nonnull)rule parent:(MPDisplayRule * _Nonnull)parent;
- (nonnull instancetype)initWithRule:(MPDisplayRule * _Nonnull)rule;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Resets the DisplayRule to the original state.
- (void)reset;
/// Populate with data via JSONModel.
/// Should never be used from outside the MapsIndoors SDK.
- (nullable instancetype)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

@protocol MPTileLayer;
@class MPVenue;
@class MPFloor;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPFloorTileLayer_")
@protocol MPFloorTileLayer
@property (nonatomic, readonly, strong) id <MPTileLayer> _Nonnull layer;
- (nullable instancetype)initWithVenue:(MPVenue * _Nonnull)venue andFloor:(MPFloor * _Nonnull)floor;
@end



@protocol MPMapProvider;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore11MPMapConfig_")
@protocol MPMapConfig
@property (nonatomic, readonly, strong) id <MPMapProvider> _Nonnull mapProvider;
@end

@class UIView;
@protocol MPMapProviderDelegate;
@protocol MPPositionPresenter;
@protocol MPUtils;
@protocol MPTileLayerClass;
@class MPViewModelProducer;
@protocol MPTileProvider;
@protocol MPRouteRenderer;
@class NSBundle;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore13MPMapProvider_")
@protocol MPMapProvider
@property (nonatomic, readonly, strong) UIView * _Nullable view;
@property (nonatomic) UIEdgeInsets padding;
@property (nonatomic) BOOL MPaccessibilityElementsHidden;
@property (nonatomic, strong) id <MPMapProviderDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) id <MPPositionPresenter> _Nonnull positionPresenter;
@property (nonatomic, readonly, strong) id <MPUtils> _Nonnull utils;
@property (nonatomic, readonly, strong) id <MPTileLayerClass> _Nonnull tileLayerClass;
- (void)showInfoWindow:(BOOL)shouldShowInfowindow locationID:(NSString * _Nonnull)locationID;
@property (nonatomic, readonly, strong) id <MPCameraOperator> _Nonnull cameraOperator;
- (void)setViewModelsWithProducer:(MPViewModelProducer * _Nonnull)producer;
- (void)setTileProviderWithTileProvider:(id <MPTileProvider> _Nonnull)tileProvider;
- (void)reloadTilesForFloorChange;
@property (nonatomic, readonly, strong) id <MPRouteRenderer> _Nonnull routeRenderer;
- (void)applyBundle:(NSBundle * _Nonnull)bundle;
@end

@class MPMapExtend;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore21MPMapProviderDelegate_")
@protocol MPMapProviderDelegate
- (void)didTapAtCoordinateDelegateWithCoordinates:(CLLocationCoordinate2D)coordinates mapExtend:(MPMapExtend * _Nonnull)mapExtend zoom:(float)zoom distanceLimit:(double)distanceLimit areaLimit:(double)areaLimit;
- (void)didChangeCameraPositionDelegate;
- (void)mapViewDidFinishTileRenderingDelegate;
@end




SWIFT_CLASS("_TtC15MapsIndoorsCore20MPPositionController")
@interface MPPositionController : NSObject
@property (nonatomic) NSInteger floorIndex;
@property (nonatomic) NSInteger userFloorIndex;
@property (nonatomic, strong) UIImage * _Nonnull markerIcon;
- (nonnull instancetype)initWithMapConfig:(id <MPMapConfig> _Nonnull)mapConfig OBJC_DESIGNATED_INITIALIZER;
- (void)redrawUserLocation;
- (void)setUserPosition:(CLLocationCoordinate2D)position floorIndex:(NSInteger)floorIndex accuracy:(double)accuracy heading:(double)heading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MPPositionResult;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore19MPPositionPresenter_")
@protocol MPPositionPresenter
@property (nonatomic) BOOL optionalisVisible;
@property (nonatomic, strong) MPPositionResult * _Nonnull position;
- (void)redrawUserLocationWithCurrentFloorIndex:(NSInteger)currentFloorIndex userFloorIndex:(NSInteger)userFloorIndex icon:(UIImage * _Nonnull)icon;
- (void)setUserLocationWithPosition:(CLLocationCoordinate2D)position floorIndex:(NSInteger)floorIndex accuracy:(double)accuracy heading:(double)heading;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore12MPProjection_")
@protocol MPProjection
@property (nonatomic, readonly, strong) CoreRegion * _Nonnull visibleRegion;
- (CGPoint)pointForCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (CLLocationCoordinate2D)coordinateForPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
@end

@class MPGraphNode;
@class NSCoder;
@class NSData;
@class JSONModelError;

SWIFT_CLASS("_TtC15MapsIndoorsCore24MPRouteNetworkEntryPoint")
@interface MPRouteNetworkEntryPoint : MPPoint
@property (nonatomic, readonly) MPBoundaryType boundaryType;
@property (nonatomic, copy) NSString * _Nullable label;
+ (MPRouteNetworkEntryPoint * _Nonnull)newWithEntryPointNode:(MPGraphNode * _Nonnull)entryNode SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithData:(NSData * _Null_unspecified)data error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)initWithLat:(double)latitude lon:(double)longitude SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithLat:(double)latitude lon:(double)longitude zValue:(double)z SWIFT_UNAVAILABLE;
- (null_unspecified instancetype)initWithString:(NSString * _Null_unspecified)string error:(JSONModelError * _Nullable * _Null_unspecified)err SWIFT_UNAVAILABLE;
- (null_unspecified instancetype)initWithString:(NSString * _Null_unspecified)string usingEncoding:(NSUInteger)encoding error:(JSONModelError * _Nullable * _Null_unspecified)err SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class RouteViewModelProducer;

SWIFT_PROTOCOL("_TtP15MapsIndoorsCore15MPRouteRenderer_")
@protocol MPRouteRenderer
- (void)applyWithModel:(RouteViewModelProducer * _Nonnull)model animate:(BOOL)animate duration:(NSTimeInterval)duration repeating:(BOOL)repeating primaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor primaryWidth:(float)primaryWidth secondaryWidth:(float)secondaryWidth;
- (void)moveCameraWithPoints:(NSArray<NSValue *> * _Nonnull)points animate:(BOOL)animate durationMs:(NSInteger)durationMs tilt:(float)tilt fitMode:(enum MPCameraViewFitMode)fitMode;
- (void)clear;
- (void)setOnRouteMarkerClickedDelegateWithDelegate:(id <MPOnRouteMarkerClickedDelegate> _Nonnull)delegate;
@end


/// MPSolutionConfig is the way to access the Solution settings made in the MapsIndoors CMS.
/// MPSolutionConfig governs solution level settings such as:
/// <ul>
///   <li>
///     Marker clustering
///   </li>
///   <li>
///     Marker collision handling
///   </li>
///   <li>
///     Main Display Rule
///   </li>
///   <li>
///     MPSettings3D
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MapsIndoorsCore16MPSolutionConfig")
@interface MPSolutionConfig : NSObject
@property (nonatomic) BOOL enableClustering;
@property (nonatomic) enum MPCollisionHandling collisionHandling;
@property (nonatomic, readonly, strong) MPDisplayRule * _Nonnull mainDisplayRule;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull settings3D;
/// Populate with data via JSONModel.
/// Should never be used from outside the MapsIndoors SDK.
- (MPSolutionConfig * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore11MPTileLayer_")
@protocol MPTileLayer
@property (nonatomic) NSInteger zIndex;
@property (nonatomic) NSInteger tileSize;
@property (nonatomic) float opacity;
@property (nonatomic) BOOL fadeIn;
- (void)clearLayerCache;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore16MPTileLayerClass_")
@protocol MPTileLayerClass
- (id <MPTileLayer> _Nonnull)tileLayer SWIFT_WARN_UNUSED_RESULT;
- (void)clearTileCache;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore14MPTileProvider_")
@protocol MPTileProvider
- (UIImage * _Nullable)getTileWithX:(NSUInteger)x y:(NSUInteger)y zoom:(NSUInteger)zoom SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)templateUrl SWIFT_WARN_UNUSED_RESULT;
- (double)tileSize SWIFT_WARN_UNUSED_RESULT;
- (void)clearMap;
@end


SWIFT_PROTOCOL("_TtP15MapsIndoorsCore7MPUtils_")
@protocol MPUtils
/// Returns the initial heading (degrees clockwise of North) at |from| of the shortest path to |to|.
/// The returned value is in the range [0, 360).
/// Returns 0 if the two coordinates are the same.
/// Both coordinates must be valid.
/// To get the final heading at |to| one may use (GMSGeometryHeading(|to|, |from|) + 180) modulo 360.
- (CLLocationDirection)MPGeometryHeadingFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to SWIFT_WARN_UNUSED_RESULT;
/// Returns the great circle distance between two coordinates, in meters, on Earth.
/// This is the shortest distance between the two coordinates on the sphere.
/// Both coordinates must be valid.
- (CLLocationDistance)MPGeometryDistanceFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to SWIFT_WARN_UNUSED_RESULT;
/// Returns whether |point| lies inside of path. The path is always considered closed, regardless of
/// whether the last point equals the first or not.
/// Inside is defined as not containing the South Pole – the South Pole is always outside.
/// |path| describes great circle segments if |geodesic| is YES, and rhumb (loxodromic) segments
/// otherwise.
/// If |point| is exactly equal to one of the vertices, the result is YES. A point that is not equal
/// to a vertex is on one side or the other of any path segment – it can never be “exactly on the
/// border”.
/// See GMSGeometryIsLocationOnPath() for a border test with tolerance.
- (BOOL)MPGeometryContainsLocationWithPoint:(CLLocationCoordinate2D)point path:(NSArray<NSValue *> * _Nonnull)path geodesic:(BOOL)geodesic SWIFT_WARN_UNUSED_RESULT;
/// Returns the area of a geodesic polygon defined by |path| on Earth.
/// The “inside” of the polygon is defined as not containing the South pole.
/// If |path| is not closed, it is implicitly treated as a closed path nevertheless and the result is
/// the same.
/// All coordinates of the path must be valid.
/// The polygon must be simple (not self-overlapping) and may be concave.
/// If any segment of the path is a pair of antipodal points, the result is undefined – because two
/// antipodal points do not form a unique great circle segment on the sphere.
- (double)MPGeometryArea:(NSArray<NSValue *> * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Returns the great circle length of |path|, in meters, on Earth.
/// This is the sum of GMSGeometryDistance() over the path segments.
/// All the coordinates of the path must be valid.
- (CLLocationDistance)MPGeometryLength:(NSArray<NSValue *> * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Returns the signed area of a geodesic polygon defined by |path| on Earth.
/// The result has the same absolute value as GMSGeometryArea(); it is positive if the points of path
/// are in counter-clockwise order, and negative otherwise.
/// The same restrictions as on GMSGeometryArea() apply.
- (double)MPGeometrySignedArea:(NSArray<NSValue *> * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Returns the coordinate that lies the given |fraction| of the way between the |from| and |to|
///   </li>
///   <li>
///     coordinates on the shortest path between the two.
///   </li>
///   <li>
///   </li>
///   <li>
///     The resulting longitude is in the range [-180, 180).
///   </li>
/// </ul>
- (CLLocationCoordinate2D)MPGeometryInterpolateFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to fraction:(double)fraction SWIFT_WARN_UNUSED_RESULT;
- (CLLocationCoordinate2D)calculateProjCoordWithCoordinateP:(CLLocationCoordinate2D)coordinateP coordinateU:(CLLocationCoordinate2D)coordinateU coordinateV:(CLLocationCoordinate2D)coordinateV SWIFT_WARN_UNUSED_RESULT;
@end

@class MPLocation;

SWIFT_CLASS("_TtC15MapsIndoorsCore19MPViewModelProducer")
@interface MPViewModelProducer : NSObject
- (nonnull instancetype)initWithLocations:(NSArray<MPLocation *> * _Nonnull)locations mapControl:(MPMapControl * _Nonnull)mapControl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore22RouteViewModelProducer")
@interface RouteViewModelProducer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15MapsIndoorsCore12TileProvider")
@interface TileProvider : NSObject <MPTileProvider>
- (void)clearMap;
- (nonnull instancetype)initWithVenue:(MPVenue * _Nonnull)venue floor:(MPFloor * _Nonnull)floor tileSize:(NSInteger)tileSize OBJC_DESIGNATED_INITIALIZER;
- (UIImage * _Nullable)getTileWithX:(NSUInteger)x y:(NSUInteger)y zoom:(NSUInteger)zoom SWIFT_WARN_UNUSED_RESULT;
- (double)tileSize SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)templateUrl SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
