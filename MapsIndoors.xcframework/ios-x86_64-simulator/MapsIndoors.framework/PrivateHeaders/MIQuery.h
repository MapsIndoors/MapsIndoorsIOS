// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from LocationInterface.djinni

#import "MICoordinate.h"
#import "MIOrdering.h"
#import <Foundation/Foundation.h>

/** The `Query` object is used to setup search query parameters for a search. See `LocationService.getLocations()`.; */
@interface MIQuery : NSObject
- (nonnull instancetype)initWithQueryProperties:(nonnull NSArray<NSString *> *)queryProperties
                                          query:(nonnull NSString *)query
                                           near:(nonnull MICoordinate *)near
                                   nearAltitude:(float)nearAltitude
                                       ordering:(nonnull NSArray<MIOrdering *> *)ordering;
+ (nonnull instancetype)QueryWithQueryProperties:(nonnull NSArray<NSString *> *)queryProperties
                                           query:(nonnull NSString *)query
                                            near:(nonnull MICoordinate *)near
                                    nearAltitude:(float)nearAltitude
                                        ordering:(nonnull NSArray<MIOrdering *> *)ordering;

/** List of properties that `LocationService` will take into account when finding and sorting matching locations. By default, `LocationService` will search in the name, roomId and aliases properties. Possible other properties depend on the location content. E.g. if a `Location` has a field called `booking-id`, the string "booking-id" (case-sensitive) may be added. Query properties added that does not exist in any locations will be ignored.; */
@property (nonatomic, readonly, nonnull) NSArray<NSString *> * queryProperties;

/** Single line search string.; */
@property (nonatomic, readonly, nonnull) NSString * query;

/** Geographical point that serve as additional horizontal proximity context for a search. If supplied, locations that is closer to the `near` point will be ranked higher.; */
@property (nonatomic, readonly, nonnull) MICoordinate * near;

/** Altitude in meters that serve as additional vertical proximity context for a search. If supplied, locations that is closer to the `nearAltitude` will be ranked higher.; */
@property (nonatomic, readonly) float nearAltitude;

@property (nonatomic, readonly, nonnull) NSArray<MIOrdering *> * ordering;

@end
