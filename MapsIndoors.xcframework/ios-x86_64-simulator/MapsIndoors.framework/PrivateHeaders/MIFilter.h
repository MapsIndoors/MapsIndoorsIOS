// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from LocationInterface.djinni

#import "MICoordinateBounds.h"
#import "MIFloatRange.h"
#import "MIGeometry.h"
#import <Foundation/Foundation.h>

/** The `Filter` object is used to setup search filter parameters for a search. See `LocationService.getLocations()`.; */
@interface MIFilter : NSObject
- (nonnull instancetype)initWithGroups:(nonnull NSArray<NSNumber *> *)groups
                             locations:(nonnull NSArray<NSNumber *> *)locations
                                 types:(nonnull NSArray<NSNumber *> *)types
                                bounds:(nonnull MICoordinateBounds *)bounds
                              geometry:(nonnull MIGeometry *)geometry
                               parents:(nonnull NSArray<NSNumber *> *)parents
                                  take:(int32_t)take
                                  skip:(int32_t)skip
                              altitude:(nonnull MIFloatRange *)altitude
                       outdoorAltitude:(nonnull MIFloatRange *)outdoorAltitude
                                 depth:(int32_t)depth
                ignoreSearchableStatus:(BOOL)ignoreSearchableStatus
              ignoreActiveToFromStatus:(BOOL)ignoreActiveToFromStatus;
+ (nonnull instancetype)FilterWithGroups:(nonnull NSArray<NSNumber *> *)groups
                               locations:(nonnull NSArray<NSNumber *> *)locations
                                   types:(nonnull NSArray<NSNumber *> *)types
                                  bounds:(nonnull MICoordinateBounds *)bounds
                                geometry:(nonnull MIGeometry *)geometry
                                 parents:(nonnull NSArray<NSNumber *> *)parents
                                    take:(int32_t)take
                                    skip:(int32_t)skip
                                altitude:(nonnull MIFloatRange *)altitude
                         outdoorAltitude:(nonnull MIFloatRange *)outdoorAltitude
                                   depth:(int32_t)depth
                  ignoreSearchableStatus:(BOOL)ignoreSearchableStatus
                ignoreActiveToFromStatus:(BOOL)ignoreActiveToFromStatus;

/** Groups filter. List of group ids as in `Group.groupId`. If multiple groups are supplied the filter will be OR'ed, meaning if a location belongs to at least one of the groups it will be considered as a match.; */
@property (nonatomic, readonly, nonnull) NSArray<NSNumber *> * groups;

/** Locations filter. List of Location ids as in `Location.locationId`. If multiple locations are supplied the filter will be OR'ed.; */
@property (nonatomic, readonly, nonnull) NSArray<NSNumber *> * locations;

/** Types filter. List of Type ids as in `Location.typeId`. If multiple types are supplied the filter will be OR'ed, meaning if a location belongs to at least one of the types it will be considered as a match.; */
@property (nonatomic, readonly, nonnull) NSArray<NSNumber *> * types;

/** Rectangular geographical bounds filter.; */
@property (nonatomic, readonly, nonnull) MICoordinateBounds * bounds;

@property (nonatomic, readonly, nonnull) MIGeometry * geometry;

/** List of location ids that is hierarchially considered as a parent of other locations. Venues are a parents of Buildings and other Locations (mainly outdoor locations). Buildings are parents of Floors. Floors are parents of Rooms and other Locations.; */
@property (nonatomic, readonly, nonnull) NSArray<NSNumber *> * parents;

/** Limit number of locations in the result.; */
@property (nonatomic, readonly) int32_t take;

/** Skip locations in the result, e.g. for pagination.; */
@property (nonatomic, readonly) int32_t skip;

/** Filter indoor locations by altitude. Passing a range defined by the same number as start and end will filter by exactly that altitude value.; */
@property (nonatomic, readonly, nonnull) MIFloatRange * altitude;

/** Filter outdoor locations by altitude. Passing a range defined by the same number as start and end will filter by exactly that altitude value.; */
@property (nonatomic, readonly, nonnull) MIFloatRange * outdoorAltitude;

/**
 * The depth property makes it possible to get the n'th descendant of a parent location. ;
 * Thus, the depth property only applies to filters that has set one or more parents. ;
 * The hierarchial tree of data is generally structured as Venue > Building > Floor > Room > POI.;
 * For example, this means that a Floor is the 1st descendant of a Building. ;
 * So to get all locations inside a Building, set the depth to 3.;
 * The default value is 1, giving you only the immediate descendant of the specified parents.;
 */
@property (nonatomic, readonly) int32_t depth;

/** Set this to ignore the "searchable status" of Location-objects.; */
@property (nonatomic, readonly) BOOL ignoreSearchableStatus;

/** Set this to ignore the "active to/from status" of Location-objects. This will allow for example to find room geometries for inactive rooms.; */
@property (nonatomic, readonly) BOOL ignoreActiveToFromStatus;

@end
