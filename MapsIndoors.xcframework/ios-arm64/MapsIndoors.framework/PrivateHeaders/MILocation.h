// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from LocationInterface.djinni

#import "MIBaseType.h"
#import "MIGeometry.h"
#import "MILocationStatus.h"
#import "MITextProperty.h"
#import <Foundation/Foundation.h>

/**
 *################################################# LOCATION AND DEPENDENCIES  ########################################################
 * The `Location` class holds all properties for a single location entity.;
 */
@interface MILocation : NSObject
- (nonnull instancetype)initWithLocationId:(int32_t)locationId
                                  parentId:(int32_t)parentId
                                   aliases:(nonnull NSArray<NSString *> *)aliases
                                    groups:(nonnull NSArray<NSNumber *> *)groups
                                    status:(MILocationStatus)status
                                  baseType:(MIBaseType)baseType
                                properties:(nonnull NSArray<MITextProperty *> *)properties
                                  geometry:(nonnull MIGeometry *)geometry
                                  altitude:(float)altitude
                                    typeId:(int32_t)typeId
                                  sourceId:(int32_t)sourceId
                                  isIndoor:(BOOL)isIndoor;
+ (nonnull instancetype)LocationWithLocationId:(int32_t)locationId
                                      parentId:(int32_t)parentId
                                       aliases:(nonnull NSArray<NSString *> *)aliases
                                        groups:(nonnull NSArray<NSNumber *> *)groups
                                        status:(MILocationStatus)status
                                      baseType:(MIBaseType)baseType
                                    properties:(nonnull NSArray<MITextProperty *> *)properties
                                      geometry:(nonnull MIGeometry *)geometry
                                      altitude:(float)altitude
                                        typeId:(int32_t)typeId
                                      sourceId:(int32_t)sourceId
                                      isIndoor:(BOOL)isIndoor;

/** Location id; */
@property (nonatomic, readonly) int32_t locationId;

/** Id of immediate parent location, e.g. a building or a venue location id.; */
@property (nonatomic, readonly) int32_t parentId;

/** Location aliases used as alternate search terms.; */
@property (nonatomic, readonly, nonnull) NSArray<NSString *> * aliases;

/** Location group relations.; */
@property (nonatomic, readonly, nonnull) NSArray<NSNumber *> * groups;

/** Location status; */
@property (nonatomic, readonly) MILocationStatus status;

/** Location base type. Used to distinguish venue, buildings, floors, rooms, areas or POIs from each other.; */
@property (nonatomic, readonly) MIBaseType baseType;

/** Location properties. Name, description, alternate id etc.; */
@property (nonatomic, readonly, nonnull) NSArray<MITextProperty *> * properties;

/** Location geometry; */
@property (nonatomic, readonly, nonnull) MIGeometry * geometry;

/** Location altitude, interpreted as a z-index value.; */
@property (nonatomic, readonly) float altitude;

/** Location type. Refers to a class that determines which properties are expected on a given location.; */
@property (nonatomic, readonly) int32_t typeId;

/** Location source. Reference to the location source that originally created the location.; */
@property (nonatomic, readonly) int32_t sourceId;

/** Indoor/outdoor state. If true the location is placed indoors, if false, outdoors.; */
@property (nonatomic, readonly) BOOL isIndoor;

@end
