#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef MAPSINDOORS_SWIFT_H
#define MAPSINDOORS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MapsIndoors",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@protocol MPMenuInfo;

/// Provides the contextual information needed for setting up a map with specific MapsPeople site data.
SWIFT_PROTOCOL("_TtP11MapsIndoors11MPAppConfig_")
@protocol MPAppConfig
/// The list of settings that have been defined for this solution in the CMS.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable appSettings;
@property (nonatomic, readonly, copy) NSString * _Nullable colorAccent;
@property (nonatomic, readonly, copy) NSString * _Nullable colorPrimary;
@property (nonatomic, readonly, copy) NSString * _Nullable colorPrimaryDark;
/// An ordered list of menu items for a specified menu.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSArray<id <MPMenuInfo>> *> * _Nullable menuInfo;
/// The list of URLs to download images for each venue.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable venueImages;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors16MPAuthClientInfo_")
@protocol MPAuthClientInfo
@property (nonatomic, readonly, copy) NSString * _Nonnull clientID;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull preferredIDPS;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors13MPAuthDetails_")
@protocol MPAuthDetails
@property (nonatomic, readonly, copy) NSString * _Nonnull authIssuer;
@property (nonatomic, readonly, copy) NSString * _Nonnull authScope;
@property (nonatomic, readonly) BOOL isAuthRequired;
@property (nonatomic, readonly, copy) NSArray<id <MPAuthClientInfo>> * _Nonnull authClients;
@end

@protocol MPBuilding;
@class NSDate;
@class NSNumber;
@protocol MPLocation;
@protocol MPVenue;

/// Query object to be used with MPBookingService.getBookableLocationsUsingQuery().
/// Queries are defined by a required timespan and a number of optional filter properties.
SWIFT_CLASS("_TtC11MapsIndoors15MPBookableQuery")
@interface MPBookableQuery : NSObject
/// Optional filter for which Building the found Locations should be contained in.
@property (nonatomic, strong) id <MPBuilding> _Nullable building;
/// Optional filter for which Category the found Locations should belong to.
@property (nonatomic, copy) NSString * _Nullable category;
/// Required end date for your potential booking.
@property (nonatomic, copy) NSDate * _Nonnull endTime;
/// Optional filter for which Floor the found Locations should belong to.
@property (nonatomic, strong) NSNumber * _Nullable floorIndex;
/// Optional filter for which Location the found Locations should either be or be contained in.
@property (nonatomic, strong) id <MPLocation> _Nullable location;
/// Optional filter for what the found Locations should belong to.
@property (nonatomic, copy) NSString * _Nullable locationType;
/// Required start date for your potential booking.
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// Optional filter for which Venue the found Locations should be contained in.
@property (nonatomic, strong) id <MPVenue> _Nullable venue;
/// Initialize a query to see which Locations are available given the specified requirements.
/// <code>startTime</code> and <code>endTime</code> are required as a minimum.
/// \param startTime Start date for your potential booking.
///
/// \param endTime End date for your potential booking.
///
- (nonnull instancetype)initWithStartTime:(NSDate * _Nonnull)startTime endTime:(NSDate * _Nonnull)endTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>MPBooking</code> represents an existing booking object or a booking to be made.
/// <code>bookingId</code> will be non-<code>nil</code> for an existing booking, and <code>nil</code> for a booking to be made.
SWIFT_CLASS("_TtC11MapsIndoors9MPBooking")
@interface MPBooking : NSObject
@property (nonatomic, copy) NSString * _Nullable bookingDescription;
@property (nonatomic, copy) NSString * _Nullable bookingId;
@property (nonatomic, copy) NSDate * _Nullable endTime;
/// Indicates whether this booking is managed by the MapsIndoors Booking Service or has been created by other means. Managed bookings are cancellable by the booking service.
@property (nonatomic, readonly) BOOL isManaged;
@property (nonatomic, strong) id <MPLocation> _Nullable location;
@property (nonatomic, copy) NSString * _Nullable locationId;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable participantIds;
@property (nonatomic, copy) NSDate * _Nullable startTime;
@property (nonatomic, copy) NSString * _Nullable title;
- (MPBooking * _Nullable)initWithDictionary:(id _Nonnull)dictionary SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)asDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Booking authentication configuration model. This may be used if the <code>MPBookingService</code> should book on behalf of an authenticated user.
SWIFT_CLASS("_TtC11MapsIndoors19MPBookingAuthConfig")
@interface MPBookingAuthConfig : NSObject
/// Set the access token that must be used when performing bookings.
@property (nonatomic, copy) NSString * _Nonnull accessToken;
/// Set the tenant id that must be used when performing bookings. This is relevant in scenarios where a location can be booked in more than one tenant.
@property (nonatomic, copy) NSString * _Nullable tenantId;
/// Constructor that takes an access token.
/// \param accessToken The access token to use when performing bookings.
///
- (nonnull instancetype)initWithAccessToken:(NSString * _Nonnull)accessToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MPBookingsQuery;

/// MPBookingService allows for access to the MapsIndoors booking service.
/// The booking service is a special integration that has to be enabled in the MapsIndoors cloud systems.
/// The service allows for:
/// <ul>
///   <li>
///     querying for bookable items, e.g. find a “meeting room from 10-12”.
///   </li>
///   <li>
///     getting the current bookings for a user or a location, e.g. “when is this room booked”.
///   </li>
///   <li>
///     booking and cancelling bookings.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP11MapsIndoors16MPBookingService_")
@protocol MPBookingService
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <MPBookingService> _Nonnull sharedInstance;)
+ (id <MPBookingService> _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Set authentication configuration. This may be used if the Booking Service should book on behalf of an authenticated user. Otherwise the attempted bookings will be anonymous.
@property (nonatomic, strong) MPBookingAuthConfig * _Nullable authenticationConfig;
/// Query for bookable locations given the query filter.
/// \param query Query to apply.
///
///
/// returns:
/// The Locations that are available for booking.
- (void)bookableLocationsUsingQuery:(MPBookableQuery * _Nonnull)query completionHandler:(void (^ _Nonnull)(NSArray<id <MPLocation>> * _Nullable, NSError * _Nullable))completionHandler;
/// Query for locations that are configured for booking given the query.
/// \param query Query to apply.
///
///
/// returns:
/// The Locations that are possible to book. They may not be available.
- (void)locationsConfiguredForBooking:(MPBookableQuery * _Nonnull)query completionHandler:(void (^ _Nonnull)(NSArray<id <MPLocation>> * _Nullable, NSError * _Nullable))completionHandler;
/// Get existing booking according the the given <code>MPBookingsQuery</code>
/// \param query Query to apply.
///
///
/// returns:
/// The existing bookings within the conditions set by the <code>query</code> parameter.
- (void)bookingsUsingQuery:(MPBookingsQuery * _Nonnull)query completionHandler:(void (^ _Nonnull)(NSArray<MPBooking *> * _Nullable, NSError * _Nullable))completionHandler;
/// Book the resource identified by the booking parameter.
/// \param booking Identification of resource, timespan etc to book.
///
///
/// returns:
/// The confirmed booking.
- (void)performBooking:(MPBooking * _Nonnull)booking completionHandler:(void (^ _Nonnull)(MPBooking * _Nullable, NSError * _Nullable))completionHandler;
/// Cancel the booking identified by the booking parameter.
/// \param booking The booking to cancel.
///
///
/// returns:
/// The cancelled booking.
- (void)cancelBooking:(MPBooking * _Nonnull)booking completionHandler:(void (^ _Nonnull)(MPBooking * _Nullable, NSError * _Nullable))completionHandler;
@end


/// Query object to be used with MPBookingService.getBookingsUsingQuery()
/// Queries can be either for a location or a user (organizerId), and may optionally be limited to a given timespan.
SWIFT_CLASS("_TtC11MapsIndoors15MPBookingsQuery")
@interface MPBookingsQuery : NSObject
@property (nonatomic, strong) id <MPLocation> _Nullable location;
@property (nonatomic, copy) NSString * _Nullable organizerId;
@property (nonatomic, copy) NSDate * _Nullable startTime;
@property (nonatomic, copy) NSDate * _Nullable endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MPPoint;
@class MPGeoBounds;

/// MPEntity is a general protocol implemented by MPLocation, MPBuilding and MPVenue.
SWIFT_PROTOCOL("_TtP11MapsIndoors8MPEntity_")
@protocol MPEntity
/// The mapsindoors entity’s point.
@property (nonatomic, readonly, strong) MPPoint * _Nonnull entityPosition;
/// The mapsindoors entity’s bounding box.
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull entityBounds;
/// Indidates if the entity’s geometry is a point or a polygon.
@property (nonatomic, readonly) BOOL entityIsPoint;
@end

@protocol MPFloor;
@class MPPolygonGeometry;
@protocol MPLocationField;

/// Holds relevant data for a single building, and the buildings floor levels.
SWIFT_PROTOCOL_NAMED("MPBuilding")
@protocol MPBuilding <MPEntity>
/// The Building address.
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// The Building administrative id.
@property (nonatomic, readonly, copy) NSString * _Nullable administrativeId;
/// The Building anchor coordinate.
@property (nonatomic, readonly, strong) MPPoint * _Nullable anchor;
/// The geographic bounds for the building.
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull boundingBox;
/// The Building id.
@property (nonatomic, readonly, copy) NSString * _Nullable buildingId;
/// Holds the current floor.
@property (nonatomic, readonly, strong) NSNumber * _Nullable currentFloor;
/// The buildings default floor. Is used by MPMapControl to determine which floor to show if a user have not already selected a floor.
@property (nonatomic, readonly, strong) NSNumber * _Nullable defaultFloor;
/// External id.
@property (nonatomic, readonly, copy) NSString * _Nullable externalId;
/// The Building floors. Since this is a Dictionary the order of floors is not guaranteed.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MPFloor>> * _Nullable floors;
/// The polygon geometry describing the Building outline.
@property (nonatomic, readonly, strong) MPPolygonGeometry * _Nullable geometry;
/// The Building name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Dictionary of custom properties of the Building.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MPLocationField>> * _Nonnull properties;
/// The id of the Venue the Building is part of.
@property (nonatomic, readonly, copy) NSString * _Nullable venueId;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors16MPCameraPosition_")
@protocol MPCameraPosition
@property (nonatomic, readonly) CLLocationCoordinate2D target;
@property (nonatomic, readonly) float zoom;
@property (nonatomic, readonly) CLLocationDirection bearing;
@property (nonatomic, readonly) double viewingAngle;
- (id <MPCameraPosition> _Nullable)cameraWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom SWIFT_WARN_UNUSED_RESULT;
- (id <MPCameraPosition> _Nullable)initCameraWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom bearing:(CLLocationDirection)bearing viewingAngle:(double)viewingAngle SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MPCameraViewFitMode, open) {
  MPCameraViewFitModeNorthAligned = 0,
  MPCameraViewFitModeFirstStepAligned = 1,
  MPCameraViewFitModeStartToEndAligned = 2,
};

/// The different ways to handle collisions of icons and labels on the map.
typedef SWIFT_ENUM(NSInteger, MPCollisionHandling, open) {
/// Will allow markers to overlap, nothing will be removed.
  MPCollisionHandlingAllowOverLap = 0,
/// Will hide labels if they are overlapping with another feature such as an icon or another label.
  MPCollisionHandlingRemoveLabelFirst = 1,
/// Will hide icons if they are overlapping with another feature such as an icon or another label.
  MPCollisionHandlingRemoveIconFirst = 2,
/// Will hide markers if they are overlapping with another marker.
  MPCollisionHandlingRemoveIconAndLabel = 3,
};

/// Which information to show from the Location close to the end of a route leg.
typedef SWIFT_ENUM(NSInteger, MPContextualInfoScope, open) {
  MPContextualInfoScopeIconAndName = 0,
  MPContextualInfoScopeIcon = 1,
  MPContextualInfoScopeName = 2,
};


/// Settings for showing contextual info along the rendered route.
SWIFT_CLASS("_TtC11MapsIndoors24MPContextualInfoSettings")
@interface MPContextualInfoSettings : NSObject
/// The Types of Location that should be used when showing text and icon for a start or end marker.
/// If no Types are supplied, all Types of Locations will be considered.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull types;
/// The Categories of Location that should be used when showing text and icon for a start or end marker.
/// If no Categories are supplied, all Categories of Locations will be considered.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull categories;
/// The maximum distance in meters allowed for using text and icon from a Location. Default of 5 meters.
@property (nonatomic) double maxDistance;
/// Which content should be used. Default is <code>MPContextualInfoScope/iconAndName</code>.
@property (nonatomic) enum MPContextualInfoScope infoScope;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// Optionally create your own cluster icon generator for the SDK to use.
SWIFT_PROTOCOL("_TtP11MapsIndoors19MPCustomClusterIcon_")
@protocol MPCustomClusterIcon
/// Given a cluster of a given type and size, produce an appropriate icon to represent the cluster.
- (UIImage * _Nonnull)clusterIconForType:(NSString * _Nonnull)type size:(NSInteger)size SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MPFloorSelectorDelegate;

SWIFT_PROTOCOL("_TtP11MapsIndoors21MPCustomFloorSelector_")
@protocol MPCustomFloorSelector
/// The current building whose floors are shown in the floor selector. Setting this will switch to another Building.
@property (nonatomic, strong) id <MPBuilding> _Nullable building;
/// Delegate object to hold the floor change event method.
@property (nonatomic, strong) id <MPFloorSelectorDelegate> _Nullable delegate;
/// The current floor index of the floor selector. Setting this will switch to another Floor.
@property (nonatomic, strong) NSNumber * _Nullable floorIndex;
/// Invoked when the SDK indicates to show the floor selector (e.g. a building is present in the viewport).
- (void)onShow;
/// Invoked when the SDK indicates to hide the floor selector (e.g. no buildings are present in the viewport).
- (void)onHide;
@optional
/// Removes the floor selector view from its super view (usually the map view).
- (void)remove;
@end

@class UIView;

/// Optionally create your own info window generator for the SDK to use.
SWIFT_PROTOCOL("_TtP11MapsIndoors18MPCustomInfoWindow_")
@protocol MPCustomInfoWindow
/// Given an MPLocation, produce an info window view.
- (UIView * _Nonnull)infoWindowForLocation:(id <MPLocation> _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
@end


/// Data field model, e.g. used for categories.
SWIFT_PROTOCOL("_TtP11MapsIndoors11MPDataField_")
@protocol MPDataField
/// Dictionary of custom fields.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MPLocationField>> * _Nullable fields;
/// The key of the data field.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// The value of the data field.
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@end

enum MPDataSetCachingStrategy : NSInteger;
@protocol MPDataSetCacheItem;

/// Data set cache class.
SWIFT_PROTOCOL("_TtP11MapsIndoors14MPDataSetCache_")
@protocol MPDataSetCache
/// Caching strategy for the data set.
@property (nonatomic, readonly) enum MPDataSetCachingStrategy cachingStrategy;
/// Cache item for caching the full data set.
@property (nonatomic, readonly, strong) id <MPDataSetCacheItem> _Nonnull cacheItem;
/// Data set id.
@property (nonatomic, readonly, copy) NSString * _Nonnull dataSetId;
/// <code>true</code> if this dataset has data bundled inside the application, else <code>false</code>.
@property (nonatomic, readonly) BOOL haveBundledData;
@property (nonatomic, readonly) BOOL isSyncing;
/// Dataset name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

enum MPDataSetCachingScope : NSInteger;

/// Data set cache item class.
SWIFT_PROTOCOL("_TtP11MapsIndoors18MPDataSetCacheItem_")
@protocol MPDataSetCacheItem <NSObject>
/// Disk size in bytes for the currently cached content of this cache item.
@property (nonatomic, readonly) NSUInteger cachedSize;
/// Date of last successfull caching performed for this cache item.
@property (nonatomic, readonly, copy) NSDate * _Nullable cachedTimestamp;
/// Cache item id.
@property (nonatomic, readonly, copy) NSString * _Nonnull cachingItemId;
/// Cache scope for this cache item.
@property (nonatomic, readonly) enum MPDataSetCachingScope cachingScope;
/// Caching strategy for this cache item.
@property (nonatomic, readonly) enum MPDataSetCachingStrategy cachingStrategy;
/// Cache state. If true, content is cached for this cache item.
@property (nonatomic, readonly) BOOL isCached;
/// Synchronisation state. If true, content is currently being synchronised for this cache item.
@property (nonatomic, readonly) BOOL isSyncing;
/// Cache item content language.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// Cache item name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Latest synchronisation result as an error object. If nil, either no synchronisation has been performed or latest synchronisation was successful.
@property (nonatomic, readonly) NSError * _Nullable syncResult;
/// Estimated possible synchronization size, if no content has been synchronised yet for this cache item.
@property (nonatomic, readonly) NSUInteger syncSize;
/// Date of last content synchronisation performed for this cache item.
/// Note this does not indicate success or failure, just that a synchronization finished at a certain point in time.
@property (nonatomic, readonly, copy) NSDate * _Nullable syncTimestamp;
/// Initialise a data set cache item with an id.
/// \param id Item id.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id;
@end

@protocol MPDataSetCacheManagerDelegate;
@protocol MPDataSetCacheManagerSizeDelegate;

/// Data set manager class.
SWIFT_PROTOCOL("_TtP11MapsIndoors21MPDataSetCacheManager_")
@protocol MPDataSetCacheManager
/// Data set manager delegate.
@property (nonatomic, strong) id <MPDataSetCacheManagerDelegate> _Nullable delegate;
/// Synchronization state of manager. If true, the manager is currently synchronising.
@property (nonatomic, readonly) BOOL isSyncing;
/// List of managed data sets.
@property (nonatomic, readonly, copy) NSArray<id <MPDataSetCache>> * _Nonnull managedDataSets;
/// Add data set to the list of managed data sets.
/// \param dataSetId Data set id of the data set that should be added.
///
///
/// returns:
/// The cache object if data set was successfully added as a result of this call, if the dataset already existed this method returns nil.
- (id <MPDataSetCache> _Nullable)addDataSet:(NSString * _Nonnull)dataSetId SWIFT_WARN_UNUSED_RESULT;
/// Add data set to the list of managed data sets.
/// \param dataSetId Data set id of the data set that should be added.
///
/// \param cachingScope Caching scope for this dataset.
///
///
/// returns:
/// The cache object if data set was successfully added as a result of this call, if the dataset already existed this method returns nil.
- (id <MPDataSetCache> _Nullable)addDataSet:(NSString * _Nonnull)dataSetId cachingScope:(enum MPDataSetCachingScope)cachingScope SWIFT_WARN_UNUSED_RESULT;
/// Cancel any running synchronization of data sets.
- (void)cancelSynchronization;
/// Cancel synchronization of data for the given cache items.
/// \param items Cache Items to cancel sync of.
///
- (void)cancelSynchronizationOfCacheItems:(NSArray<id <MPDataSetCacheItem>> * _Nonnull)items;
/// The dataset-object for the current MapsIndoors API key / solution
///
/// returns:
/// The dataset-object for the current MapsIndoors API key / solution
- (id <MPDataSetCache> _Nullable)dataSetForCurrentMapsIndoorsAPIKey SWIFT_WARN_UNUSED_RESULT;
/// Get the dataset object for the given dataSetId.
/// \param id dataSetId to find corresponding MPDataSetCache object for.
///
///
/// returns:
/// MPDataSetCache object
- (id <MPDataSetCache> _Nullable)dataSetWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Determine synchronization sizes for the given set of MPDataSetCaches.
/// \param dataSetCaches MPDataSetCaches to determine sync sizes for.
///
/// \param delegate callback/progress receiver
///
- (void)fetchSyncSizesForDataSetCaches:(NSArray<id <MPDataSetCache>> * _Nonnull)dataSetCaches delegate:(id <MPDataSetCacheManagerSizeDelegate> _Nonnull)delegate;
/// Remove data set from the list of managed data sets. This will remove any cached content for that data set as well.
/// If the dataset to be removed is the current MapsIndoors dataset, it is not removed at this time, but scheduled for deletion at a later time.
/// \param dataset Data set that should be removed.
///
///
/// returns:
/// <code>true</code> if data set was successfully removed, else <code>false</code>.
- (BOOL)removeDataSet:(id <MPDataSetCache> _Nonnull)dataset SWIFT_WARN_UNUSED_RESULT;
/// Set a caching scope for given cache item.
/// \param scope Caching scope.
///
/// \param cacheItem Cache item.
///
///
/// returns:
/// <code>true</code> if scope is changed for this item, else <code>false</code>.
- (BOOL)setCachingScope:(enum MPDataSetCachingScope)scope cacheItem:(id <MPDataSetCacheItem> _Nonnull)cacheItem SWIFT_WARN_UNUSED_RESULT;
/// Set a caching strategy for given cache item.
/// \param strategy Caching strategy.
///
/// \param cacheItem Cache item.
///
///
/// returns:
/// <code>true</code> if strategy is set for this item, else <code>false</code>.
- (BOOL)setCachingStrategy:(enum MPDataSetCachingStrategy)strategy cacheItem:(id <MPDataSetCacheItem> _Nonnull)cacheItem SWIFT_WARN_UNUSED_RESULT;
/// Fetch and update content for given cache items. The delegate object receives the completion event.
/// \param items The cache items to perform a synchronisation for.
///
- (void)synchronizeCacheItems:(NSArray<id <MPDataSetCacheItem>> * _Nonnull)items;
/// Fetch and update content for all managed data sets. The delegate object receives the completion event.
- (void)synchronizeContent;
@end


/// Data set manager delegate protocol.
SWIFT_PROTOCOL("_TtP11MapsIndoors29MPDataSetCacheManagerDelegate_")
@protocol MPDataSetCacheManagerDelegate <NSObject>
@optional
/// Called when a data set is added to a data set manager.
/// \param dataSetManager Originator of the callback.
///
/// \param dataset Data set that was added.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager didAddDataSet:(id <MPDataSetCache> _Nonnull)dataset;
/// Called when a data set has finished synchronization.
/// \param dataSetManager Originator of the callback.
///
/// \param dataset Data set that has finished synchronization.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager didFinishSynchronizingDataSet:(id <MPDataSetCache> _Nonnull)dataset;
/// Called when a cache item synchronisation is finished.
/// \param dataSetManager Originator of the callback.
///
/// \param item Item that was synchronised.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager didFinishSynchronizingItem:(id <MPDataSetCacheItem> _Nonnull)item;
/// Called when a data set is removed from a data set manager.
/// \param dataSetManager Originator of the callback.
///
/// \param dataset Data set that was removed.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager didRemoveDataSet:(id <MPDataSetCache> _Nonnull)dataset;
/// Called when a data set is scheduled for synchronization by the dataset manager.
/// \param dataSetManager Originator of the callback.
///
/// \param dataset Data set that was scheduled for synchronization.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager willStartSynchronizingDataSet:(id <MPDataSetCache> _Nonnull)dataset;
/// Called when a cache item synchronisation is started.
/// \param dataSetManager Originator of the callback.
///
/// \param item Item that will be synchronised.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager willStartSynchronizingItem:(id <MPDataSetCacheItem> _Nonnull)item;
/// Called when the data set manager has finished synchronization of one or more datasets.
/// \param dataSetManager Originator of the callback
///
- (void)dataSetManagerDidFinishSynchronizing:(id <MPDataSetCacheManager> _Nonnull)dataSetManager;
/// Called when the data set manager starts to synchronize one or more datasets.
/// \param dataSetManager Originator of the callback.
///
- (void)dataSetManagerWillStartSynchronizing:(id <MPDataSetCacheManager> _Nonnull)dataSetManager;
@end


/// Delegate protocol for getting callbacks when determining the size af dataset syncs.
SWIFT_PROTOCOL("_TtP11MapsIndoors33MPDataSetCacheManagerSizeDelegate_")
@protocol MPDataSetCacheManagerSizeDelegate <NSObject>
@optional
/// Called to indicate that the DataSetManager has finished determining sync sizes for all managed datasets.
/// \param dataSetManager Originator of the callback.
///
- (void)dataSetManagerDidFinishFetchingSyncSizes:(id <MPDataSetCacheManager> _Nonnull)dataSetManager;
/// Called when the DataSetManager starts determing sync sizes for its managed datasets.
/// \param dataSetManager Originator of the callback.
///
- (void)dataSetManagerWillStartFetchingSyncSizes:(id <MPDataSetCacheManager> _Nonnull)dataSetManager;
/// Called to indicate the fnish of fetching sync size for a single dataset.
/// \param dataSetManager Originator of the callback.
///
/// \param dataset The dataset for which sync size has being determined.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager didFetchSyncSizesForDataSet:(id <MPDataSetCache> _Nonnull)dataset;
/// Called to indicate the start of fetching sync size for a single dataset.
/// \param dataSetManager Originator of the callback.
///
/// \param dataset The dataset for which sync size is being determined.
///
- (void)dataSetManager:(id <MPDataSetCacheManager> _Nonnull)dataSetManager willStartFetchingSyncSizesForDataSet:(id <MPDataSetCache> _Nonnull)dataset;
@end

/// Data set caching scope. Currently only a full cache (non-partial) scope is supported (basic and detailed scope will sync full dataset).
typedef SWIFT_ENUM(NSInteger, MPDataSetCachingScope, open) {
/// Basic cache scope. Information about locations, buildings and venue and type images.
  MPDataSetCachingScopeBasic = 0,
/// <code>basic</code> + location-specific images.
  MPDataSetCachingScopeDetailed = 1,
/// Full cache scope. All necessary content is downloaded for a data set to work offline.
  MPDataSetCachingScopeFull = 2,
};

/// Data set caching strategy.
typedef SWIFT_ENUM(NSInteger, MPDataSetCachingStrategy, open) {
/// Don’t cache. Data will be removed at any point after usage.
  MPDataSetCachingStrategyDontCache = 0,
/// Cache automatically. Data will be kept or removed according to internal behaviors.
  MPDataSetCachingStrategyAutomatic = 1,
/// Cache manually. Data will be kept until data set is removed manually in the data set manager.
  MPDataSetCachingStrategyManual = 2,
};

@class MPHighway;
enum MPTravelMode : NSInteger;

SWIFT_CLASS("_TtC11MapsIndoors17MPDirectionsQuery")
@interface MPDirectionsQuery : NSObject
/// Date for arrival. Setting both arrival and departure will result in undefined behavior.
@property (nonatomic, copy) NSDate * _Nullable arrival;
/// Way types that should be avoided when calculating routes. Supports any <code>MPHighwayType</code>.
@property (nonatomic, copy) NSArray<MPHighway *> * _Nullable avoidWayTypes;
/// Date for departure. Setting both arrival and departure will result in undefined behavior.
@property (nonatomic, copy) NSDate * _Nullable departure;
/// Destination location.
@property (nonatomic, strong) id <MPLocation> _Nonnull destination;
/// Origin location.
@property (nonatomic, strong) id <MPLocation> _Nonnull origin;
/// Set travel mode. Default is <code>MPTravelMode/walking</code>.
@property (nonatomic) enum MPTravelMode travelMode;
/// Initialiser that takes locations as origin and destination.
/// \param origin Origin location.
///
/// \param destination Destination location.
///
- (nonnull instancetype)initWithOrigin:(id <MPLocation> _Nonnull)origin destination:(id <MPLocation> _Nonnull)destination OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MPDirectionsRendererDelegate;
@class UIColor;
@protocol MPRoute;

/// This allows for an easy way to display a route on the MapsIndoors map. Each leg of the route can be shown individually and can be navigated by manipulating the selected leg index. Various customization options are available to adjust the polyline styling and camera behavior.
SWIFT_PROTOCOL("_TtP11MapsIndoors20MPDirectionsRenderer_")
@protocol MPDirectionsRenderer
@property (nonatomic, strong) MPContextualInfoSettings * _Nullable contextualInfoSettings;
@property (nonatomic, strong) id <MPDirectionsRendererDelegate> _Nullable delegate;
@property (nonatomic) BOOL fitBounds;
/// The fit mode of the camera, when displaying route elements on the map.
@property (nonatomic) enum MPCameraViewFitMode fitMode;
@property (nonatomic, readonly) BOOL isRouteShown;
@property (nonatomic) UIEdgeInsets padding;
/// The color of the rendered polyline path.
@property (nonatomic, strong) UIColor * _Nullable pathColor;
/// The route to be rendered.
@property (nonatomic, strong) id <MPRoute> _Nullable route;
/// The index of the route leg to render (or being rendered).
/// This is a way to render a specific leg instead of using <code>nextLeg()</code> or <code>previousLeg()</code>
@property (nonatomic) NSInteger routeLegIndex;
/// Animate the rendered path, when displaying a route element on the map.
/// \param duration The duration of camera animations in seconds. Set to <code>0</code> to disable animation.
///
- (void)animateWithDuration:(NSTimeInterval)duration;
/// Clears the route from the map.
- (void)clear;
/// Renders the next leg if possible.
- (BOOL)nextLeg SWIFT_WARN_UNUSED_RESULT;
/// Renders the previous leg if possible.
- (BOOL)previousLeg SWIFT_WARN_UNUSED_RESULT;
/// Force a render of the currently showing route leg.
- (void)update;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors28MPDirectionsRendererDelegate_")
@protocol MPDirectionsRendererDelegate
- (void)onDirectionsRendererChangedFloorWithFloorIndex:(NSInteger)floorIndex;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors19MPDirectionsService_")
@protocol MPDirectionsService
/// Get directions as specified in the <code>MPDirectionsQuery</code>.
/// \param query Directions query.
///
///
/// returns:
/// A calculated route or an error.
- (void)routingWithQuery:(MPDirectionsQuery * _Nonnull)query completionHandler:(void (^ _Nonnull)(id <MPRoute> _Nullable, NSError * _Nullable))completionHandler;
@end

@class NSURL;

/// This class represents a Display Rule, a MapsIndoors concept which describes a number of styling values for MapsIndoors objects.
/// The values contained within dictates how the MapsIndoors SDK renders a given object on the map (POI, area, selection, model, etc.).
/// Display Rule data can be edited through the MapsIndoors CMS, and can be modified at runtime in SDKs. Invoke <code>reset</code> on a <code>MPDisplayRule</code> to reset all values to those from the CMS.
SWIFT_CLASS("_TtC11MapsIndoors13MPDisplayRule")
@interface MPDisplayRule : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// The marker icon to use on markers that apply to the display rule.
/// Will return nil if the icon has not yet been loaded - use <code>getIconAsync()</code> to asynchronously get the icon.
@property (nonatomic, strong) UIImage * _Nullable icon;
/// Size of the icon image.
@property (nonatomic) CGSize iconSize;
/// URL to the marker icon to use.
@property (nonatomic, copy) NSURL * _Nullable iconURL;
/// Whether or not to show an icon.
@property (nonatomic) BOOL iconVisible;
/// The label to show for the marker. It can be a fixed string or a label template, e.g. <code>"{{name}}"</code>, <code>"{{roomId}}"</code>, <code>"Room #{{roomId}}"</code> etc..
@property (nonatomic, copy) NSString * _Nullable label;
/// Maximum width in points of the label shown on the map. If the text shown in the label
/// (typically the Location name) is longer than the labelMaxWidth the text will flow onto as many
/// lines as needed.
@property (nonatomic) NSUInteger labelMaxWidth;
/// Whether or not to show a text label. See <code>label</code> property.
@property (nonatomic) BOOL labelVisible;
/// The zoom level above the location label should be shown.
@property (nonatomic) double labelZoomFrom;
/// The zoom level beneath the location label should be shown.
@property (nonatomic) double labelZoomTo;
/// The bearing of the 2D model. The value is the rotation in degrees clockwise from north.
@property (nonatomic) double model2DBearing;
/// The height of the 2D model. The value is in meters to make it easy to associate with the real world.
@property (nonatomic) double model2DHeightMeters;
/// The URL of the image for the 2D model.
@property (nonatomic, copy) NSString * _Nullable model2DModel;
/// Determines the visibility of the 2D model.
@property (nonatomic) BOOL model2DVisible;
/// The width of the 2D model. The value is in meters to make it easy to associate with the real world.
@property (nonatomic) double model2DWidthMeters;
/// The 2D model zoom value from dictates from which zoom level the model should start being shown.
@property (nonatomic) double model2DZoomFrom;
/// The 2D model zoom to value dictates from which zoom level the model should stop being shown.
@property (nonatomic) double model2DZoomTo;
/// Name/identifier of the rule. Also used as the rule condition for the location types.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The fill color of the polygon drawn on the map.
@property (nonatomic, strong) UIColor * _Nullable polygonFillColor;
/// The stroke color of the polygon drawn on the map.
@property (nonatomic, strong) UIColor * _Nullable polygonStrokeColor;
/// The stroke width of the polygon drawn on the map.
@property (nonatomic) double polygonStrokeWidth;
/// Whether or not to show the location polygon on the map.
@property (nonatomic) BOOL polygonVisible;
/// The map zoom level above which the location polygon should be visible.
@property (nonatomic) double polygonZoomFrom;
/// The map zoom level beneath which the location Polygon should be visible.
@property (nonatomic) double polygonZoomTo;
/// Should anything be shown at the zoom level.
- (BOOL)showAtZoom:(double)zoom SWIFT_WARN_UNUSED_RESULT;
/// Whether or not to show the location.
@property (nonatomic) BOOL visible;
/// The map zoom level above which the location should be visible.
@property (nonatomic) double zoomFrom;
/// The map zoom level beneath which the location should be visible.
@property (nonatomic) double zoomTo;
/// The map zoom level above which the extrusion should be visible.
@property (nonatomic) double extrusionZoomFrom;
/// The map zoom level beneatch which the extrusion should be visible.
@property (nonatomic) double extrusionZoomTo;
/// The color which the extrusion should be drawn with.
@property (nonatomic, strong) UIColor * _Nullable extrusionColor;
/// The height of the extrusion on the map.
@property (nonatomic) double extrusionHeight;
/// The map zoom level beneatch which the walls should be visible.
@property (nonatomic) double wallsZoomTo;
/// The map zoom level above which the walls should be visible.
@property (nonatomic) double wallsZoomFrom;
/// The color which the walls should be drawn with.
@property (nonatomic, strong) UIColor * _Nullable wallsColor;
/// The height of the walls on the map.
@property (nonatomic) double wallsHeight;
- (nonnull instancetype)initWithRule:(MPDisplayRule * _Nonnull)rule parent:(MPDisplayRule * _Nonnull)parent;
- (nonnull instancetype)initWithRule:(MPDisplayRule * _Nonnull)rule;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Resets the DisplayRule to the original state.
- (void)reset;
/// Populate with data via JSONModel.
/// Should never be used from outside the MapsIndoors SDK.
- (nullable instancetype)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end

/// The MapsIndoors SDK contains a number of display rules used to style non-location content (blue dot, buildings or locations when they are selected).
/// Display rules are internally structured as a hierachy where inheritence is applied. The inheritence of values flow as: <code>default</code> -> <code>main</code> -> <code>type</code> -> <code>location</code> (e.g. if a <code>type</code> rule is missing a value, it gets it from <code>main</code>).
/// The default rule is guaranteed to have non-nil values for all properties.
typedef SWIFT_ENUM(NSInteger, MPDisplayRuleType, open) {
/// The display  rule used for drawing outline of the current building, only parts of this display rule is respected.
  MPDisplayRuleTypeBuildingOutline = 0,
/// The display rule used for drawing a location, if it is selected. This display rule is entirely respected.
  MPDisplayRuleTypeSelectionHighlight = 1,
/// The display rule used for drawing the blue dot, only parts of this display rule is respected.
  MPDisplayRuleTypeBlueDot = 2,
/// The display rule at the root of the display rule inheritence. This is hardcoded into the MapsIndoors SDK. The main rule inherits from the default rule.
  MPDisplayRuleTypeDefault = 3,
/// The display rule which may be edited via the CMS. The main rule inherits from the default rule.
  MPDisplayRuleTypeMain = 4,
};


SWIFT_PROTOCOL("_TtP11MapsIndoors17MPEncodedPolyline_")
@protocol MPEncodedPolyline
@property (nonatomic, readonly, copy) NSString * _Nullable points;
@end



SWIFT_CLASS("_TtC11MapsIndoors12MPEntityInfo")
@interface MPEntityInfo : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable aliases;
@property (nonatomic, copy) NSDictionary<NSString *, id <MPLocationField>> * _Nullable properties;
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)initWithName:(NSString * _Nullable)withName withAliases:(NSArray<NSString *> * _Nullable)withAliases withProperties:(NSDictionary<NSString *, id <MPLocationField>> * _Nullable)withProperties withLanguage:(NSString * _Nullable)withLanguage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEntityInfo:(MPEntityInfo * _Nonnull)withEntityInfo OBJC_DESIGNATED_INITIALIZER;
/// <blockquote>
/// Warning: [INTERNAL - DO NOT USE]
///
/// </blockquote>
- (MPEntityInfo * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// MapsIndoors error codes
typedef SWIFT_ENUM(NSInteger, MPError, open) {
  MPErrorNoError = 0,
  MPErrorInvalidApiKey = 1,
  MPErrorNetworkError = 2,
  MPErrorUnknownError = 3,
};
static NSString * _Nonnull const MPErrorDomain = @"MapsIndoors.MPError";


/// Filter object used when making a request to e.g. <code>MapsIndoorsShared/locationsWith(query:filter:)</code>.
/// The filters will be applied in the following order:
/// <ol>
///   <li>
///     Bounds filter
///   </li>
///   <li>
///     Locations filter
///   </li>
///   <li>
///     Floor index filter
///   </li>
///   <li>
///     Categories filter
///   </li>
///   <li>
///     Types filter
///   </li>
///   <li>
///     Parents and depth filter
///   </li>
///   <li>
///     Take filter
///   </li>
///   <li>
///     Skip filter
///   </li>
/// </ol>
/// Locations must pass all filters to be part of the result.
SWIFT_CLASS("_TtC11MapsIndoors8MPFilter")
@interface MPFilter : NSObject
/// Categories filter. List of category keys as in <code>MPLocation.categories.allKeys</code>. If multiple categories are supplied the filter will OR’ed, meaning if a location belongs to at least one of the categories it will be considered as a match.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull categories;
/// Rectangular geographical bounds filter.
@property (nonatomic, strong) MPGeoBounds * _Nullable bounds;
/// List of location ids that is hierarchially considered as a parent of other locations.
/// Venues are a parents of Buildings and other Locations (mainly outdoor locations).
/// Buildings are parents of Floors.
/// Floors are parents of Rooms and other Locations.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull parents;
/// Limit number of locations in the result.
@property (nonatomic) NSInteger take;
/// Skip locations in the result, e.g. for pagination.
@property (nonatomic) NSInteger skip;
/// The depth property makes it possible to get the n’th descendant of a parent location. ;
/// Thus, the depth property only applies to filters that has set one or more parents. ;
/// The hierarchial tree of data is generally structured as Venue > Building > Floor > Room > POI.;
/// For example, this means that a Floor is the 1st descendant of a Building. ;
/// So to get all locations inside a Building, set the depth to 3.;
/// The default value is 1, giving you only the immediate descendant of the specified parents.;
@property (nonatomic) NSInteger depth;
/// Locations filter. List of location ids as in <code>MPLocation/locationId</code>. If multiple locations are supplied the filter will OR’ed.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull locations;
/// Filter by floor index. Note that there is a difference between the displayed floor name (e.g. “LG”) and the index (e.g. -1).
@property (nonatomic, strong) NSNumber * _Nullable floorIndex;
/// Types filter. List of type names as in <code>MPLocation/type</code>. If multiple types are supplied the filter will OR’ed, meaning if a location belongs to at least one of the types it will be considered as a match.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull types;
- (nullable instancetype)initWithCategories:(NSArray<NSString *> * _Nullable)categories bounds:(MPGeoBounds * _Nullable)bounds parents:(NSArray<NSString *> * _Nullable)parents take:(NSInteger)take skip:(NSInteger)skip depth:(NSInteger)depth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors13MPMapBehavior_")
@protocol MPMapBehavior
@property (nonatomic) BOOL moveCamera;
@property (nonatomic) BOOL showInfoWindow;
@property (nonatomic) BOOL allowFloorChange;
@property (nonatomic) NSInteger animationDuration;
@end


/// Filter behavior class that determines how a filter should be display on the map. Get the default behavior from <code>MPFilterBehavior/default</code>. The default behavior is no camera movement and no infowindow shown.
SWIFT_CLASS("_TtC11MapsIndoors16MPFilterBehavior")
@interface MPFilterBehavior : NSObject <MPMapBehavior>
/// Default filter behavior
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) MPFilterBehavior * _Nonnull default_;)
+ (MPFilterBehavior * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Whether <code>MPMapControl</code> should move the camera and fit the map view to the filtered locations. The default behavior is no camera movement (<code>false</code>).
@property (nonatomic) BOOL moveCamera;
/// Whether <code>MPMapControl</code> should show the info window if a filter only contains one Location. The default behavior is no infowindow shown (<code>false</code>).
@property (nonatomic) BOOL showInfoWindow;
@property (nonatomic) BOOL allowFloorChange;
@property (nonatomic) NSInteger animationDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Floor data model. Holds the floor geometry, display name, z-index and id of the building it belongs to.
SWIFT_PROTOCOL_NAMED("MPFloor")
@protocol MPFloor
/// The Floor aliases.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable aliases;
/// The id of the Building this Floor belongs to.
@property (nonatomic, readonly, copy) NSString * _Nullable buildingId;
/// The Floor id.
@property (nonatomic, readonly, copy) NSString * _Nonnull floorId;
/// The Floor index.
@property (nonatomic, readonly, strong) NSNumber * _Nullable floorIndex;
/// The Floor name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The Floor layer style, if any.
@property (nonatomic, readonly, copy) NSString * _Nullable style;
@end


/// Delegate protocol specification to hold the floor change event.
SWIFT_PROTOCOL("_TtP11MapsIndoors23MPFloorSelectorDelegate_")
@protocol MPFloorSelectorDelegate
/// Floor change event method. Must be implemented by delegate object.
- (void)onFloorIndexChanged:(NSNumber * _Nonnull)floorIndex;
@end

@class MPGeoPoint;
@class MPGeoPolygon;

SWIFT_PROTOCOL("_TtP11MapsIndoors18MPGeometryProtocol_")
@protocol MPGeometryProtocol
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) MPGeoPoint * _Nonnull center;
@property (nonatomic, readonly, strong) MPGeoPolygon * _Nonnull polygon;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11MapsIndoors11MPGeoBounds")
@interface MPGeoBounds : NSObject <MPGeometryProtocol>
- (nonnull instancetype)initWithSouthWest:(CLLocationCoordinate2D)southWest northEast:(CLLocationCoordinate2D)northEast OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CLLocationCoordinate2D northEast;
@property (nonatomic, readonly) CLLocationCoordinate2D southWest;
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) MPGeoPoint * _Nonnull center;
@property (nonatomic, readonly, strong) MPGeoPolygon * _Nonnull polygon;
@property (nonatomic, readonly) double area;
- (MPGeoBounds * _Nonnull)expandWithCoord:(CLLocationCoordinate2D)coord SWIFT_WARN_UNUSED_RESULT;
- (MPGeoBounds * _Nonnull)expandWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapsIndoors10MPGeoPoint")
@interface MPGeoPoint : NSObject <MPGeometryProtocol>
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) MPGeoPoint * _Nonnull center;
@property (nonatomic, readonly, strong) MPGeoPolygon * _Nonnull polygon;
- (double)bearingToPoint:(MPGeoPoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapsIndoors12MPGeoPolygon")
@interface MPGeoPolygon : NSObject
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) MPGeoPoint * _Nonnull center;
@property (nonatomic, readonly, strong) MPGeoPolygon * _Nonnull polygon;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
- (void)appendWithPoint:(CLLocationCoordinate2D)point;
@property (nonatomic, readonly) double area;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapsIndoors13MPGeoPolyline")
@interface MPGeoPolyline : NSObject
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) MPGeoPoint * _Nonnull center;
@property (nonatomic, readonly, strong) MPGeoPolygon * _Nonnull polygon;
@property (nonatomic, readonly, copy) NSArray<NSValue *> * _Nonnull points;
- (void)appendWithPoint:(CLLocationCoordinate2D)point;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11MapsIndoors11MPGeoRegion")
@interface MPGeoRegion : NSObject <MPGeometryProtocol>
@property (nonatomic, readonly) CLLocationCoordinate2D nearLeft;
@property (nonatomic, readonly) CLLocationCoordinate2D farLeft;
@property (nonatomic, readonly) CLLocationCoordinate2D farRight;
@property (nonatomic, readonly) CLLocationCoordinate2D nearRight;
- (nonnull instancetype)initWithNearLeft:(CLLocationCoordinate2D)nearLeft farLeft:(CLLocationCoordinate2D)farLeft farRight:(CLLocationCoordinate2D)farRight nearRight:(CLLocationCoordinate2D)nearRight OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull bounds;
@property (nonatomic, readonly, strong) MPGeoPoint * _Nonnull center;
@property (nonatomic, readonly, strong) MPGeoPolygon * _Nonnull polygon;
@property (nonatomic, readonly) double area;
- (BOOL)intersectsWithOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (double)distanceToOther:(id <MPGeometryProtocol> _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors11MPGeometryP_")
@protocol MPGeometryP
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable bbox;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@end


SWIFT_CLASS_NAMED("MPGeometry")
@interface MPGeometry : NSObject <MPGeometryP>
/// Optional bounding box for the geometry object.
/// If present, it contains two coordinates: [longitude1, latitude1, longitude2, latitude2].
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable bbox;
/// Type of data (equals Geometry)
@property (nonatomic, copy) NSString * _Nullable type;
/// <blockquote>
/// Warning: [INTERNAL - DO NOT USE]
///
/// </blockquote>
- (MPGeometry * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11MapsIndoors29MPGeometryContainmentMetadata")
@interface MPGeometryContainmentMetadata : NSObject
/// If isContained actual coordinate, if not contained nearest coordinate on boundary.
@property (nonatomic) CLLocationCoordinate2D coordinate;
/// 0 if contained, else distance to closest point.
@property (nonatomic) CLLocationDistance distance;
/// Inside polygon and not in a hole.
@property (nonatomic) BOOL isContained;
/// Inside a polygon hole.
@property (nonatomic) BOOL isContainedInHole;
@property (nonatomic, strong) NSObject * _Nullable geoSpatialObject;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
@end




SWIFT_PROTOCOL("_TtP11MapsIndoors23MPGeometryQueryProtocol_")
@protocol MPGeometryQueryProtocol <NSObject>
/// The area of the polygon computed as the area of the outer path with the area of all holes subtracted.
@property (nonatomic, readonly) double area;
/// Check if the given point is contained within the polygon.
/// \param point Point to check for containment.
///
///
/// returns:
/// True if the point is inside the polygon boundary AND outside any holes in the polygon. False if the point is outside the polygon, or inside any holes in the polygon.
- (BOOL)containsPoint:(MPPoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
/// Check if the given coordinate is contained within the polygon.
/// \param coordinate Coordinate to check for containment.
///
///
/// returns:
/// True if the coordinate is inside the polygon boundary AND outside any holes in the polygon. False if the coordinate is outside the polygon, or inside any holes in the polygon.
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Check if the given coordinate is contained within the polygon.
/// \param coordinate Coordinate to check for containment.
///
/// \param ignorePolygonHoles Should holes in a polygon be ignored
///
///
/// returns:
/// True if the coordinate is inside the polygon boundary AND outside any holes in the polygon. False if the coordinate is outside the polygon, or inside any holes in the polygon.
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate ignorePolygonHoles:(BOOL)ignorePolygonHoles SWIFT_WARN_UNUSED_RESULT;
/// Check if the given coordinate is contained within the polygon, and optionally return the coordinate closest to the polygon.
/// If the polygon contains the coordinate, ‘coordinate’ is returned as nearestPoint.
/// If coordinate is not contained, the nearest point is calculated.
/// \param coordinate Coordinate to check for containment.
///
/// \param ignorePolygonHoles Should holes in a polygon be ignored
///
/// \param containmentMetadata If not nil, the nearest point and distance on the polygon boundary is returned. Note this may be the nearest point on a polygon-hole.
///
///
/// returns:
/// False if the coordinate is outside the polygon, or inside any holes in the polygon.
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate ignorePolygonHoles:(BOOL)ignorePolygonHoles containmentMetadata:(MPGeometryContainmentMetadata * _Nullable)containmentMetadata SWIFT_WARN_UNUSED_RESULT;
/// Check if the given line segment is fully contained within the polygon.
/// \param u Start coordinate of line segment to check for containment.
///
/// \param v End coordinate of line segment to check for containment.
///
///
/// returns:
/// True if the coordinate is inside the polygon boundary AND outside any holes in the polygon. False if the coordinate is outside the polygon, or inside any holes in the polygon.
- (BOOL)containsLineSegmentFromCoordinate:(CLLocationCoordinate2D)u toCoordinate:(CLLocationCoordinate2D)v SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11MapsIndoors15MPGeometryUtils")
@interface MPGeometryUtils : NSObject
+ (double)bearingBetweenPointsFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to SWIFT_WARN_UNUSED_RESULT;
+ (double)distanceFrom:(MPGeoPoint * _Nonnull)from to:(MPGeoPoint * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationCoordinate2D)closestPointOnLineSegmentWithPoint:(CLLocationCoordinate2D)point lineStart:(CLLocationCoordinate2D)lineStart lineEnd:(CLLocationCoordinate2D)lineEnd SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationCoordinate2D)interpolateFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)to fraction:(double)fraction SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MPHighwayType : NSInteger;

/// Use instances of <code>MPHighway</code> to describe which type(s) of route elements to use.
SWIFT_CLASS("_TtC11MapsIndoors9MPHighway")
@interface MPHighway : NSObject
/// The actual type of the route element.
@property (nonatomic, readonly) enum MPHighwayType type;
/// A textual description of the route element type.
@property (nonatomic, readonly, copy) NSString * _Nonnull typeString;
/// Initialise with the name of a specific route element type. If the name is unknown the type will be <code>MPHighwayType/unclassified</code>.
- (nonnull instancetype)initWithTypeString:(NSString * _Nonnull)typeString OBJC_DESIGNATED_INITIALIZER;
/// Convenience values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull unclassified;)
+ (MPHighway * _Nonnull)unclassified SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull footway;)
+ (MPHighway * _Nonnull)footway SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull residential;)
+ (MPHighway * _Nonnull)residential SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull service;)
+ (MPHighway * _Nonnull)service SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull ramp;)
+ (MPHighway * _Nonnull)ramp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull stairs;)
+ (MPHighway * _Nonnull)stairs SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull escalator;)
+ (MPHighway * _Nonnull)escalator SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull travelator;)
+ (MPHighway * _Nonnull)travelator SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull elevator;)
+ (MPHighway * _Nonnull)elevator SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull wheelchairramp;)
+ (MPHighway * _Nonnull)wheelchairramp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull wheelchairlift;)
+ (MPHighway * _Nonnull)wheelchairlift SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MPHighway * _Nonnull ladder;)
+ (MPHighway * _Nonnull)ladder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// All accepted types of highways (or route elements).
typedef SWIFT_ENUM(NSInteger, MPHighwayType, open) {
  MPHighwayTypeUnclassified = 0,
  MPHighwayTypeFootway = 1,
  MPHighwayTypeResidential = 2,
  MPHighwayTypeService = 3,
  MPHighwayTypeRamp = 4,
  MPHighwayTypeStairs = 5,
  MPHighwayTypeEscalator = 6,
  MPHighwayTypeTravelator = 7,
  MPHighwayTypeElevator = 8,
  MPHighwayTypeWheelchairramp = 9,
  MPHighwayTypeWheelchairlift = 10,
  MPHighwayTypeLadder = 11,
};


SWIFT_PROTOCOL("_TtP11MapsIndoors23MPImageProviderProtocol_")
@protocol MPImageProviderProtocol
- (void)imageFromUrlString:(NSString * _Nonnull)urlString imageSize:(CGSize)imageSize completionHandler:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionHandler;
@end

@protocol MPLiveUpdateTopic;

/// Model for a Live Update. Used in <code>MPLiveDataManagerDelegate</code> and MPLocation::getLiveUpdate().
SWIFT_PROTOCOL("_TtP11MapsIndoors12MPLiveUpdate_")
@protocol MPLiveUpdate
/// Get the Topic of the Live Update.
@property (nonatomic, readonly, strong) id <MPLiveUpdateTopic> _Nonnull topic;
/// Get the item id that a Live Update relates to. In most cases this would be the id of a <code>MPLocation</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull itemId;
/// Get the id for the origin source entity of a Live Update. Often the Live Update comes from another entity or device in a 3rd party system. For example an id of a meeting room calendar in a booking system or an id of a room temperature sensor.
@property (nonatomic, readonly, copy) NSString * _Nonnull originSourceId;
/// Get the timestamp for a Live Update.
@property (nonatomic, readonly, copy) NSString * _Nonnull timestamp;
/// Get a value from a specific Live Update property. If no value exists the method returns <code>nil</code>.
/// \param key The key for the wanted property.
///
///
/// returns:
/// The value for the provided <code>key</code>
- (id _Nullable)getLiveValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors19MPSubscriptionTopic_")
@protocol MPSubscriptionTopic
@property (nonatomic, readonly, copy) NSString * _Nonnull topicString;
- (nonnull instancetype)initWithTopic:(NSString * _Nonnull)topic;
@end


/// Topic model for a Live Update. A Live Update Topic is hierarchical in the way it is defined, and its relation to MapsIndoors data is derivable by its 7 components: Dataset, Venue, Building, Floor, Room, Location and Domain Type.
SWIFT_PROTOCOL("_TtP11MapsIndoors17MPLiveUpdateTopic_")
@protocol MPLiveUpdateTopic <MPSubscriptionTopic>
/// Get the id of the Dataset related to this topic.
@property (nonatomic, readonly, copy) NSString * _Nonnull datasetId;
/// Get the id of the Venue related to this topic if any.
@property (nonatomic, readonly, copy) NSString * _Nullable venueId;
/// Get the id of the Building related to this topic if any
@property (nonatomic, readonly, copy) NSString * _Nullable buildingId;
/// Get the id of the Floor related to this topic if any.
@property (nonatomic, readonly, copy) NSString * _Nullable floorId;
/// Get the id of the Room related to this topic if any.
@property (nonatomic, readonly, copy) NSString * _Nullable roomId;
/// Get the id of the Location related to this topic if any.
@property (nonatomic, readonly, copy) NSString * _Nullable locationId;
/// Get the Domain Type related to this topic if any.
@property (nonatomic, readonly, copy) NSString * _Nullable domainType;
/// Initialises a Topic with a 7-component path formatted string, for example “datasetId/venueId/buildingId/floorId/roomId/locationId/domainType”.
/// \param topic The topic string.
///
- (nonnull instancetype)initWithTopic:(NSString * _Nonnull)topic;
@end

enum MPLocationBaseType : NSUInteger;

SWIFT_PROTOCOL("_TtP11MapsIndoors10MPLocation_")
@protocol MPLocation <MPEntity>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull aliases;
/// Location base type.
@property (nonatomic, readonly) enum MPLocationBaseType baseType;
/// Location building property. This string correlates with <code>MPBuilding/administrativeId</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable building;
/// The categories for this location, as an array.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull categories;
@property (nonatomic, readonly, strong) MPGeoBounds * _Nullable coordinateBounds;
/// Location external id property.
@property (nonatomic, readonly, copy) NSString * _Nullable externalId;
/// If the location resides on a specific floor level, this property is set. This value correlates with <code>MPFloor/floorIndex</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull floorIndex;
/// If the location resides on a specific floor level, the name of that floor level can be retrieved here.
@property (nonatomic, readonly, copy) NSString * _Nonnull floorName;
/// Location icon. If nil, the location will either get an icon from the settings configured for the type of location or a default appearance that is configurable through ``MPMapControl`.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/// Location icon as a URL. If icon is originally set as a UIImage, this property will be ignored.
@property (nonatomic, readonly, copy) NSURL * _Nullable iconUrl;
/// URL for image associated with this ``MPLocation`.
@property (nonatomic, readonly, copy) NSString * _Nullable imageURL;
/// Determines if the Location is bookable using the <code>MPBookingService</code>.
@property (nonatomic, readonly) BOOL isBookable;
/// Location description property.
@property (nonatomic, readonly, copy) NSString * _Nullable locationDescription;
/// Location id property.
@property (nonatomic, readonly, copy) NSString * _Nonnull locationId;
/// Location name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Position as <code>MPPoint</code>.
@property (nonatomic, readonly, strong) MPPoint * _Nonnull position;
/// Custom fields associated with the location object.
/// Keys are case sensitive.  For case-insensitive access to custom fields use <code>property(key:)</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MPLocationField>> * _Nonnull fields;
/// If set, Location is restricted to the given set of app user roles.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable restrictions;
/// Location type property.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Location venue property. This string correlates with <code>MPVenue/administrativeId</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable venue;
/// Get a live property value based on a known key and domain type
/// \param forKey The key to get the value of.
///
/// \param domainType Can be any string. MapsIndoors provides a number of presets defined in <code>MPLiveDomainType</code>.
///
///
/// returns:
/// The value associated with the key for the provided domain.
- (id _Nullable)liveValueWithKey:(NSString * _Nonnull)forKey domainType:(NSString * _Nonnull)domainType SWIFT_WARN_UNUSED_RESULT;
/// Get data for custom field with key, disregarding casing of key.
/// \param key Identifier for a property
///
///
/// returns:
/// <code>MPLocationField</code> or nil.
- (id <MPLocationField> _Nullable)propertyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSUInteger, MPLocationBaseType, open) {
  MPLocationBaseTypePointOfInterest = 0,
  MPLocationBaseTypeArea = 1,
  MPLocationBaseTypeRoom = 2,
  MPLocationBaseTypeFloor = 3,
  MPLocationBaseTypeBuilding = 4,
  MPLocationBaseTypeVenue = 5,
};


SWIFT_PROTOCOL("_TtP11MapsIndoors15MPLocationField_")
@protocol MPLocationField
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
@property (nonatomic, readonly, copy) NSString * _Nullable value;
@end

enum MPLocationSourceStatus : NSInteger;
@protocol MPLocationsObserver;

/// Location source protocol.
SWIFT_PROTOCOL("_TtP11MapsIndoors16MPLocationSource_")
@protocol MPLocationSource <NSObject>
/// The id of the location source.
@property (nonatomic, readonly) NSInteger sourceId;
/// The status of the location source.
@property (nonatomic, readonly) enum MPLocationSourceStatus status;
/// Add an observer that gets callbacks about updates, additions and deletions to locations in this location source.
/// \param observer The observer object.
///
- (void)addLocationsObserver:(id <MPLocationsObserver> _Nonnull)observer;
/// Get the locations available from the location source at this point in time.
///
/// returns:
/// The list of locations.
- (NSArray<id <MPLocation>> * _Nonnull)getLocations SWIFT_WARN_UNUSED_RESULT;
/// Remove an observer that gets callbacks about updates, additions and deletions to locations in this location source.
/// \param observer The observer object to remove.
///
- (void)removeLocationsObserver:(id <MPLocationsObserver> _Nonnull)observer;
@end

typedef SWIFT_ENUM(NSInteger, MPLocationSourceStatus, open) {
/// Available and expected to provide data.
  MPLocationSourceStatusAvailable = 0,
/// Unavailable but expected to provide data under normal circumstances.
  MPLocationSourceStatusUnavailable = 1,
/// Processing and expected to provide data when initialised.
  MPLocationSourceStatusInitialising = 2,
/// Intentionally inactive and not expected to provide data
  MPLocationSourceStatusInactive = 3,
  MPLocationSourceStatusComplete = 4,
};


/// Location observer protocol.
SWIFT_PROTOCOL("_TtP11MapsIndoors19MPLocationsObserver_")
@protocol MPLocationsObserver <NSObject>
/// Location delete event method.
/// \param locations Array of deleted location ids.
///
/// \param source The source of the deleted locations.
///
- (void)onLocationsDelete:(NSArray<NSString *> * _Nonnull)locations source:(id <MPLocationSource> _Nonnull)source;
/// Location update event method.
/// \param locationUpdates Array of updated locations.
///
/// \param source The source of the updated locations.
///
- (void)onLocationsUpdate:(NSArray<id <MPLocation>> * _Nonnull)locationUpdates source:(id <MPLocationSource> _Nonnull)source;
/// Status change event method.
/// \param status The new status of the location source.
///
/// \param source The location source changing status.
///
- (void)onStatusChange:(enum MPLocationSourceStatus)status source:(id <MPLocationSource> _Nonnull)source;
@end



/// A <code>MPMapConfig</code> is needed to initialise <code>MPMapsIndoors</code>.
/// Depending on if you use Google Maps or Mapbox Maps as the map engine, this must be created differently.
/// <h3>Google Maps</h3>
/// \code
/// self.mapView = GMSMapView(frame: CGRect.zero)
///
/// if await MapsIndoors.shared.load(apiKey: solutionId) == .noError {
///     let mapConfig = MPMapConfig(gmsMapView: mapView, googleApiKey: googleKey)
///     self.mapControl = MapsIndoors.newMapControl(mapConfig: mapConfig)
/// }
///
/// \endcode<h3>Mapbox Maps</h3>
/// \code
/// let mapboxResourceOptions = ResourceOptions(accessToken: AppDelegate.mapboxKey)
/// let mapboxMapInitOptions = MapInitOptions(resourceOptions: mapboxResourceOptions, styleURI: StyleURI.light)
/// self.mapView = MapView(frame: view.bounds, mapInitOptions: mapboxMapInitOptions)
///
/// if await MapsIndoors.shared.load(apiKey: solutionId) == .noError {
///     let mapConfig = MPMapConfig(mapBoxView: mapView, accessToken: mapboxKey)
///     self.mapControl = MapsIndoors.newMapControl(mapConfig: mapConfig)
/// }
///
/// \endcode
SWIFT_CLASS("_TtC11MapsIndoors11MPMapConfig")
@interface MPMapConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MPMapControlDelegate;
@protocol MPMapStyle;
@class MPSelectionBehavior;
@protocol MPPositionProvider;

/// This is the control object for the visual representation of the MapsIndoors SDK.
SWIFT_PROTOCOL("_TtP11MapsIndoors12MPMapControl_")
@protocol MPMapControl
/// Listen to events.
@property (nonatomic, strong) id <MPMapControlDelegate> _Nullable delegate;
/// Get or set the floor selector (if none is set, a default floor selector will be used).
@property (nonatomic, strong) id <MPCustomFloorSelector> _Nullable floorSelector;
/// Hide or show the floor selector, defaults to false.
@property (nonatomic) BOOL hideFloorSelector;
/// Get the current floor index.
@property (nonatomic, readonly) NSInteger currentFloorIndex;
/// Get or set the map styling.
@property (nonatomic, strong) id <MPMapStyle> _Nullable mapStyle;
/// Enable/disable showing the users position with a blue dot (customizable) (requires your application to implement a <code>MPPositionProvider</code>).
@property (nonatomic) BOOL showUserPosition;
/// Get the current camera position state.
@property (nonatomic, readonly, strong) id <MPCameraPosition> _Nonnull cameraPosition;
/// Get or set the cluster icon generator (if none is set, the default internal will be used).
@property (nonatomic, strong) id <MPCustomClusterIcon> _Nullable customClusterIcon;
/// Get or set the info window generator (if none i set, the default internal will be used).
@property (nonatomic, strong) id <MPCustomInfoWindow> _Nullable customInfoWindow;
/// Get the currently selected location.
@property (nonatomic, readonly, strong) id <MPLocation> _Nullable selectedLocation;
/// Get the currently selected building.
@property (nonatomic, readonly, strong) id <MPBuilding> _Nullable currentBuilding;
/// Get the currently selected venue.
@property (nonatomic, readonly, strong) id <MPVenue> _Nullable currentVenue;
/// Select a location.
- (void)selectWithLocation:(id <MPLocation> _Nullable)location behavior:(MPSelectionBehavior * _Nonnull)behavior;
/// Select a building.
- (void)selectWithBuilding:(id <MPBuilding> _Nullable)building behavior:(MPSelectionBehavior * _Nonnull)behavior;
/// Select a venue.
- (void)selectWithVenue:(id <MPVenue> _Nullable)venue behavior:(MPSelectionBehavior * _Nonnull)behavior;
/// Select a floor index.
- (void)selectWithFloorIndex:(NSInteger)floorIndex;
/// Apply a filter to the map. Only show the MPLocations included in the list.
- (void)setFilterWithLocations:(NSArray<id <MPLocation>> * _Nonnull)locations behavior:(MPFilterBehavior * _Nonnull)behavior;
/// Apply a filter to the map. Only show the MPLocations captured by the MPFilter.
- (void)setFilterWithFilter:(MPFilter * _Nonnull)filter behavior:(MPFilterBehavior * _Nonnull)behavior;
/// Clear any previously applied filter.
- (void)clearFilter;
/// Force a re-render of the MapsIndoors map.
- (void)refresh;
/// Move the camera to the entity.
/// An MPEntity may be an MPVenue, MPBuilding or MPLocation.
- (void)goToEntity:(id <MPEntity> _Nonnull)entity;
/// Convenience: Enable LiveData for a given domain (includes default live data badged icons).
- (void)enableLiveDataWithDomain:(NSString * _Nonnull)domain completion:(void (^ _Nullable)(id <MPLiveUpdate> _Nonnull))completion;
/// Convinience: Disable LiveData for a given domain (includes default live data badged icons).
- (void)disableLiveDataWithDomain:(NSString * _Nonnull)domain;
/// Get a <code>MPDirectionsRenderer</code> to show a <code>MPRoute</code> on the map.
///
/// returns:
/// A <code>MPDirectionsRenderer</code> that can be configured to render a route.
- (id <MPDirectionsRenderer> _Nonnull)newDirectionsRenderer SWIFT_WARN_UNUSED_RESULT;
/// The position provider that MapsIndoors should use when user location services are needed.
/// <blockquote>
/// Warning: Experimental implementation subject to change.
///
/// </blockquote>
@property (nonatomic, strong) id <MPPositionProvider> _Nullable positionProvider;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors20MPMapControlDelegate_")
@protocol MPMapControlDelegate
@optional
/// Triggered when the map was clicked at a given point.
/// Return true to indidate that you will handle the event, and bypass default MapsIndoors SDK behavior.
- (BOOL)didTapWithCoordinate:(MPPoint * _Nonnull)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Triggered when the map with a given marker was tapped.
- (BOOL)didTapIconWithLocation:(id <MPLocation> _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Triggered when the info window with a marker with a given id was tapped.
- (BOOL)didTapInfoWindowWithLocation:(id <MPLocation> _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Triggered when location selection has changed.
/// Return true to indidate that you will handle the event, and bypass default MapsIndoors SDK behavior.
- (BOOL)didChangeWithSelectedLocation:(id <MPLocation> _Nullable)selectedLocation SWIFT_WARN_UNUSED_RESULT;
/// Triggered when venue selection has changed (programatically or by camera movement).
/// Return true to indidate that you will handle the event, and bypass default MapsIndoors SDK behavior.
- (BOOL)didChangeWithSelectedVenue:(id <MPVenue> _Nullable)selectedVenue SWIFT_WARN_UNUSED_RESULT;
/// Triggered when building selection has changed  (programatically or by camera movement).
/// Return true to indidate that you will handle the event, and bypass default MapsIndoors SDK behavior.
- (BOOL)didChangeWithSelectedBuilding:(id <MPBuilding> _Nullable)selectedBuilding SWIFT_WARN_UNUSED_RESULT;
/// Triggered when the selected floor index has changed  (programatically or by camera movement).
/// Return true to indidate that you will handle the event, and bypass default MapsIndoors SDK behavior.
- (BOOL)didChangeWithFloorIndex:(NSInteger)floorIndex SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors10MPMapStyle_")
@protocol MPMapStyle
/// Display name of the map style.
@property (nonatomic, readonly, copy) NSString * _Nullable displayName;
/// Folder identifier of the map style.
@property (nonatomic, readonly, copy) NSString * _Nonnull folder;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors10MPMenuInfo_")
@protocol MPMenuInfo
/// A language independent identifier for this specific category, can be used with e.g. <code>MPFilter</code> in <code>MapsIndoorsShared/locationsWith(query:filter:)</code> to find locations in this category.
@property (nonatomic, readonly, copy) NSString * _Nullable categoryKey;
/// An optional image URL that can be used as an icon.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// An optional image URL.
@property (nonatomic, readonly, copy) NSString * _Nullable menuImageUrl;
@end


SWIFT_CLASS_NAMED("MPMultiPolygonGeometry")
@interface MPMultiPolygonGeometry : MPGeometry <MPGeometryQueryProtocol>
@property (nonatomic, copy) NSArray<MPPolygonGeometry *> * _Nonnull coordinates;
@property (nonatomic, readonly) double area;
- (BOOL)containsPoint:(MPPoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate ignorePolygonHoles:(BOOL)ignorePolygonHoles SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate ignorePolygonHoles:(BOOL)ignorePolygonHoles containmentMetadata:(MPGeometryContainmentMetadata * _Nullable)containmentMetadata SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsLineSegmentFromCoordinate:(CLLocationCoordinate2D)u toCoordinate:(CLLocationCoordinate2D)v SWIFT_WARN_UNUSED_RESULT;
/// <blockquote>
/// Warning: [INTERNAL - DO NOT USE]
///
/// </blockquote>
- (MPMultiPolygonGeometry * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("MPPoint")
@interface MPPoint : MPGeometry
/// Make a copy of <code>MPPoint</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Array holding coordinates of the point.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull coordinates;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable bbox;
/// CoreLocation coordinate struct representation of the <code>MPPoint</code>.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
/// The latitude component.
@property (nonatomic, readonly) double latitude;
/// Latitude and longitude as a comma separated string.
@property (nonatomic, readonly, copy) NSString * _Nonnull latLongString;
/// The longitude component.
@property (nonatomic, readonly) double longitude;
/// The z / floorIndex component.
@property (nonatomic) double z;
/// The z / floorIndex component as a rounded index.
@property (nonatomic, readonly) NSInteger zIndex;
- (nonnull instancetype)init;
/// Regular geographic point geometry initialization.
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude;
/// Indoor geographic point geometry initialization.
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude z:(double)z OBJC_DESIGNATED_INITIALIZER;
/// Static <code>MPPoint</code> builder. Parses a comma separated string an returns an <code>MPPoint</code> instance.
/// \param coordinate Latitude, longitude, floor as a comma separated string.
///
///
/// returns:
/// The resulting MPPoint instance.
+ (MPPoint * _Nullable)parse:(NSString * _Nonnull)coordinate SWIFT_WARN_UNUSED_RESULT;
/// Calculate the 2d geographic distance to another point.
- (double)distanceTo:(MPPoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isZero;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// <blockquote>
/// Warning: [INTERNAL - DO NOT USE]
///
/// </blockquote>
- (MPPoint * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("MPPolygonGeometry")
@interface MPPolygonGeometry : MPGeometry <MPGeometryQueryProtocol>
@property (nonatomic, copy) NSArray<NSArray<MPPoint *> *> * _Nonnull coordinates;
@property (nonatomic, readonly) double area;
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nullable bbox;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoordinates:(NSArray<NSArray<MPPoint *> *> * _Nonnull)coordinates;
- (BOOL)containsPoint:(MPPoint * _Nonnull)point SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate ignorePolygonHoles:(BOOL)ignorePolygonHoles SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate ignorePolygonHoles:(BOOL)ignorePolygonHoles containmentMetadata:(MPGeometryContainmentMetadata * _Nullable)containmentMetadata SWIFT_WARN_UNUSED_RESULT;
- (BOOL)containsLineSegmentFromCoordinate:(CLLocationCoordinate2D)u toCoordinate:(CLLocationCoordinate2D)v SWIFT_WARN_UNUSED_RESULT;
/// The polygon boundary.  Consists of pairs of [longitude, latitude].
@property (nonatomic, readonly, copy) NSArray<MPPoint *> * _Nullable path;
/// <blockquote>
/// Warning: [INTERNAL - DO NOT USE]
///
/// </blockquote>
- (MPPolygonGeometry * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MPPositionProviderDelegate;
@class MPPositionResult;

SWIFT_PROTOCOL("_TtP11MapsIndoors18MPPositionProvider_")
@protocol MPPositionProvider
@property (nonatomic, strong) id <MPPositionProviderDelegate> _Nullable delegate;
@property (nonatomic, strong) MPPositionResult * _Nullable latestPosition;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors26MPPositionProviderDelegate_")
@protocol MPPositionProviderDelegate
- (void)onPositionUpdateWithPosition:(MPPositionResult * _Nonnull)position;
@end


SWIFT_CLASS("_TtC11MapsIndoors16MPPositionResult")
@interface MPPositionResult : NSObject
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate floorIndex:(NSInteger)floorIndex accuracy:(double)accuracy bearing:(double)bearing OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic) NSInteger floorIndex;
@property (nonatomic) double accuracy;
@property (nonatomic) double bearing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Query object used when making a request to <code>MPLocationService</code>.
SWIFT_CLASS("_TtC11MapsIndoors7MPQuery")
@interface MPQuery : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// List of properties that <code>MPLocationService</code> will take into account when finding and sorting matching locations. By default, <code>MPLocationService</code> will search in the name, externalId and aliases properties. Possible other properties depend on the location content. E.g. if an <code>MPLocation</code> has a field called <code>booking-id</code>, the string “booking-id” (case-sensitive) may be added. Query properties added that do not exist in any Locations will be ignored.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull queryProperties;
/// Single line search string.
@property (nonatomic, copy) NSString * _Nonnull query;
/// Geographical point that serve as additional horizontal and vertical proximity context for a search. If supplied, locations that are closer to the <code>near</code> point will be ranked higher. The proximity calculation is based on direct lines and does not reflect real world travel distances.
@property (nonatomic, strong) MPPoint * _Nonnull near;
@end

@protocol MPRouteBounds;
@protocol MPRouteLeg;
@class MPRouteSegmentPath;

/// The route model contains the route components: The start and end point, the overall route distance, the duration using the given travel mode(s), the actual route components (legs and steps) containing the route geometry and actions (shifts, turns, climbs etc.) performed to get to the destination point. Typically this object is not manually instantiated, but returns as a result from the <code>MPDirectionsService</code>.
SWIFT_PROTOCOL("_TtP11MapsIndoors7MPRoute_")
@protocol MPRoute
/// The route bounds.
@property (nonatomic, readonly, strong) id <MPRouteBounds> _Nullable bounds;
@property (nonatomic, readonly, copy) NSString * _Nullable copyrights;
/// The full distance in meters.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull distance;
/// The full duration in seconds based on travel times for each leg/step.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull duration;
/// The route legs: the different route components. Typically a route from 1st floor to 2nd floor will consist of two route legs.
@property (nonatomic, readonly, copy) NSArray<id <MPRouteLeg>> * _Nonnull legs;
@property (nonatomic, readonly, strong) id <MPEncodedPolyline> _Nullable overview_polyline;
/// The restrictions that apply for the route. May be empty.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull restrictions;
/// Textual summary of the route.
@property (nonatomic, readonly, copy) NSString * _Nullable summary;
/// Textual warning for the route.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull warnings;
/// Find route segment path (route leg and route step) nearest to a point and floor index.
/// \param point Point to find nearest route segment to.
///
/// \param floorIndex The floor index to find the route segment on.
///
///
/// returns:
/// The route segment closest to the provided <code>MPPoint</code> on the provided Floor.
- (MPRouteSegmentPath * _Nonnull)findNearestRouteSegmentPathFromPoint:(MPPoint * _Nonnull)point floorIndex:(NSNumber * _Nonnull)floorIndex SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MPRouteCoordinate;

SWIFT_PROTOCOL("_TtP11MapsIndoors13MPRouteBounds_")
@protocol MPRouteBounds
/// North east corner coordinate.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nullable northeast;
/// South west corner coordinate.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nullable southwest;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors17MPRouteCoordinate_")
@protocol MPRouteCoordinate
/// Floor name for this coordinate.
@property (nonatomic, readonly, copy) NSString * _Nullable floor_name;
/// Label for displaying contextual information about this coordinate.
@property (nonatomic, readonly, copy) NSString * _Nullable label;
/// Latitude angle.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull lat;
/// Longitude angle.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull lng;
/// Floor level index.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull zLevel;
@end

enum MPRouteLegType : NSInteger;
@protocol MPRouteStep;

/// Route leg model. A route model will consist of one ore more route legs. Typically a route from 1st floor to 2nd floor will consist of two route legs. Thus, a route leg defines a continueus route part within the same floor and/or building and/or vehicle.
SWIFT_PROTOCOL("_TtP11MapsIndoors10MPRouteLeg_")
@protocol MPRouteLeg
/// The route leg distance in meters.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull distance;
/// The route leg duration in seconds.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull duration;
/// The route leg end address. If the position is outdoors, the address may be a postal address. If the position is indoors, the address may be a textual description of the indoor location, like “Lower Ground Floor, Building X”.
@property (nonatomic, readonly, copy) NSString * _Nonnull end_address;
/// The route leg end position.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nonnull end_location;
/// The type of leg, determined by the source service, Google or MapsIndoors.
@property (nonatomic, readonly) enum MPRouteLegType routeLegType;
/// The route leg start address. If the position is outdoors, the address may be a postal address. If the position is indoors, the address may be a textual description of the indoor location, like “Lower Ground Floor, Building X”.
@property (nonatomic, readonly, copy) NSString * _Nonnull start_address;
/// The route leg start position.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nonnull start_location;
/// Collection of steps for the route leg.
@property (nonatomic, readonly, copy) NSArray<id <MPRouteStep>> * _Nonnull steps;
@end

typedef SWIFT_ENUM(NSInteger, MPRouteLegType, open) {
  MPRouteLegTypeMapsIndoors = 0,
  MPRouteLegTypeGoogle = 1,
};


/// Route property model
SWIFT_PROTOCOL("_TtP11MapsIndoors15MPRouteProperty_")
@protocol MPRouteProperty
/// Route property description.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Route property value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable value;
@end


/// Route result model.
SWIFT_PROTOCOL("_TtP11MapsIndoors13MPRouteResult_")
@protocol MPRouteResult
/// Routes in the result.
@property (nonatomic, readonly, copy) NSArray<id <MPRoute>> * _Nullable routes;
/// Status code from the directions service. “OK” means that a route was successfully returned.
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@end


SWIFT_CLASS("_TtC11MapsIndoors18MPRouteSegmentPath")
@interface MPRouteSegmentPath : NSObject
/// Leg index.
@property (nonatomic) NSInteger legIndex;
/// Step index.
@property (nonatomic) NSInteger stepIndex;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLegIndex:(NSInteger)legIndex stepIndex:(NSInteger)stepIndex OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MPTransitDetails;

/// Route step model. A step is segment on a <code>MPRouteLeg</code> (<code>MPRouteLeg</code> is a segment on a <code>MPRoute</code>). The step contains start and end locations, distance and duration information, as well as navigational instructions.
SWIFT_PROTOCOL("_TtP11MapsIndoors11MPRouteStep_")
@protocol MPRouteStep
/// Distance of the step in meters.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull distance;
/// Duration of the step in seconds, with specified travel mode <code>step.travel_mode</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull duration;
/// End location coordinate and floor index.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nonnull end_location;
/// Way type for this step (part of the route). E.g. footway, steps, elevator, residential etc.
@property (nonatomic, readonly, strong) MPHighway * _Nonnull highway;
/// Textual instructions for the step. May not be specified.
@property (nonatomic, readonly, copy) NSString * _Nonnull html_instructions;
/// Maneuver value for the step. Possible values are:
/// <ul>
///   <li>
///     straight
///   </li>
///   <li>
///     turn-left
///   </li>
///   <li>
///     turn-right
///   </li>
///   <li>
///     turn-sharp-left
///   </li>
///   <li>
///     turn-sharp-right
///   </li>
///   <li>
///     turn-slight-left
///   </li>
///   <li>
///     turn-slight-right
///   </li>
///   <li>
///     uturn-left
///   </li>
///   <li>
///     uturn-right
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull maneuver;
/// Encoded polyline for the step. Only long polylines may be encoded.
@property (nonatomic, readonly, strong) id <MPEncodedPolyline> _Nonnull polyline;
/// Context of the step. May be <code>InsideBuilding</code>, <code>OutsideOnVenue</code> or a custom context e.g. <code>Security</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull routeContext;
/// Start location coordinate and floor index.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nonnull start_location;
/// Transit details. May apply for <code>travel_mode</code> <code>transit</code>.
@property (nonatomic, readonly, strong) id <MPTransitDetails> _Nonnull transit_details;
/// Travel mode key. Can be <code>walking</code>, <code>bicycling</code>, <code>driving</code> or <code>transit</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull travel_mode;
@end


/// Selection behavior class that determines how a location selection should be displayed on the map.
/// Get the default behavior from <code>MPSelectionBehavior/default</code>. The default behavior is that the camera moves to display the selected location and the infowindow is shown.
SWIFT_CLASS("_TtC11MapsIndoors19MPSelectionBehavior")
@interface MPSelectionBehavior : NSObject <MPMapBehavior>
/// Default selection behavior.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) MPSelectionBehavior * _Nonnull default_;)
+ (MPSelectionBehavior * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Whether <code>MPMapControl</code> should move the camera and fit the map view to show the selected location. The default value is <code>true</code>.
@property (nonatomic) BOOL moveCamera;
/// Whether <code>MPMapControl</code> should show the info window if a filter only contains one Location. The default behavior is no infowindow shown <code>true</code>.
@property (nonatomic) BOOL showInfoWindow;
@property (nonatomic) BOOL allowFloorChange;
@property (nonatomic) NSInteger animationDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MPSolutionConfig;
@protocol MPType;

/// The solution model holds data about the buildings and floors in a solution, plus additional meta-data.
SWIFT_PROTOCOL("_TtP11MapsIndoors10MPSolution_")
@protocol MPSolution
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull availableLanguages;
@property (nonatomic, readonly, strong) MPSolutionConfig * _Nonnull config;
@property (nonatomic, readonly, copy) NSString * _Nullable dataSetId;
@property (nonatomic, readonly, copy) NSString * _Nonnull defaultLanguage;
@property (nonatomic, readonly, copy) NSString * _Nullable mapClientUrl;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull modules;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Optionally contains configuration data for the positioning systems used with the solution.
/// The content of the configuration dictionaries are specific for the positioning system.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable positionProviderConfigs;
@property (nonatomic, readonly, copy) NSArray<id <MPType>> * _Nonnull types;
/// Get a link for a location in a specific venue, for use with the web-client.
- (NSString * _Nullable)getMapClientUrlForVenueId:(NSString * _Nonnull)venueId locationId:(NSString * _Nonnull)locationId SWIFT_WARN_UNUSED_RESULT;
@end


/// MPSolutionConfig is the way to access the Solution settings made in the MapsIndoors CMS.
/// MPSolutionConfig governs solution level settings such as:
/// <ul>
///   <li>
///     Marker clustering
///   </li>
///   <li>
///     Marker collision handling
///   </li>
///   <li>
///     Main Display Rule
///   </li>
///   <li>
///     MPSettings3D
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11MapsIndoors16MPSolutionConfig")
@interface MPSolutionConfig : NSObject
@property (nonatomic) BOOL enableClustering;
@property (nonatomic) enum MPCollisionHandling collisionHandling;
/// <blockquote>
/// Warning: [INTERNAL - DO NOT USE]
///
/// </blockquote>
- (MPSolutionConfig * _Nullable)initWithDictionary:(NSDictionary * _Null_unspecified)dict error:(NSError * _Nullable * _Nullable)error SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MPSubscriptionClientDelegate;
enum MPSubscriptionState : NSInteger;

SWIFT_PROTOCOL("_TtP11MapsIndoors20MPSubscriptionClient_")
@protocol MPSubscriptionClient
@property (nonatomic, strong) id <MPSubscriptionClientDelegate> _Nonnull delegate;
@property (nonatomic) enum MPSubscriptionState state;
- (void)connect:(BOOL)cleanSessionFlag;
- (void)disconnect;
- (void)subscribe:(id <MPSubscriptionTopic> _Nonnull)topic;
- (void)unsubscribe:(id <MPSubscriptionTopic> _Nonnull)topic;
@end

@class NSData;

SWIFT_PROTOCOL("_TtP11MapsIndoors28MPSubscriptionClientDelegate_")
@protocol MPSubscriptionClientDelegate
- (void)didReceiveMessage:(NSData * _Nonnull)message onTopic:(NSString * _Nonnull)onTopic;
- (void)didSubscribe:(id <MPSubscriptionTopic> _Nonnull)topic;
- (void)didUnsubscribe:(id <MPSubscriptionTopic> _Nonnull)topic;
- (void)didUpdateState:(enum MPSubscriptionState)state;
- (void)onError:(NSError * _Nonnull)error;
- (void)onSubscriptionError:(NSError * _Nonnull)error topic:(id <MPSubscriptionTopic> _Nonnull)topic;
- (void)onUnsubscriptionError:(NSError * _Nonnull)error topic:(id <MPSubscriptionTopic> _Nonnull)topic;
@end

typedef SWIFT_ENUM(NSInteger, MPSubscriptionState, open) {
  MPSubscriptionStateClosed = 0,
  MPSubscriptionStateConnecting = 1,
  MPSubscriptionStateConnected = 2,
  MPSubscriptionStateDisconnecting = 3,
};



/// Transit agency information.
SWIFT_PROTOCOL("_TtP11MapsIndoors15MPTransitAgency_")
@protocol MPTransitAgency
/// Name contains the name of the transit agency.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Phone contains the phone number of the transit agency.
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// Url contains the URL for the transit agency.
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@end

@protocol MPTransitStop;
@protocol MPTransitTime;
@protocol MPTransitLine;

/// Transit details information.
SWIFT_PROTOCOL("_TtP11MapsIndoors16MPTransitDetails_")
@protocol MPTransitDetails
/// Arrival stop contains information about the arrival stop/station for this part of the trip.
@property (nonatomic, readonly, strong) id <MPTransitStop> _Nullable arrival_stop;
/// Contains the arrival times for this leg of the journey.
@property (nonatomic, readonly, strong) id <MPTransitTime> _Nullable arrival_time;
/// Departure stop contains information about the departure stop/station for this part of the trip.
@property (nonatomic, readonly, strong) id <MPTransitStop> _Nullable departure_stop;
/// Contains the departure times for this leg of the journey.
@property (nonatomic, readonly, strong) id <MPTransitTime> _Nullable departure_time;
/// Headsign specifies the direction in which to travel on this line, as it is marked on the vehicle or at the departure stop. This will often be the terminus station.
@property (nonatomic, readonly, copy) NSString * _Nullable headsign;
/// Specifies the expected number of seconds between departures from the same stop at this time. For example, with a headway value of 600, you would expect a ten minute wait if you should miss your bus.
@property (nonatomic, readonly, strong) NSNumber * _Nullable headway;
/// Line contains information about the transit line used in this step.
@property (nonatomic, readonly, strong) id <MPTransitLine> _Nullable line;
/// Number of stops. Contains the number of stops in this step, counting the arrival stop, but not the departure stop. For example, if your directions involve leaving from Stop A, passing through stops B and C, and arriving at stop D, <code>num_stops</code> will return 3.
@property (nonatomic, readonly, strong) NSNumber * _Nullable num_stops;
@end

@protocol MPTransitVehicle;

/// Transit line information.
SWIFT_PROTOCOL("_TtP11MapsIndoors13MPTransitLine_")
@protocol MPTransitLine
/// An array of <code>MPTransitAgency</code> objects that each provide information about the operator of the line.
@property (nonatomic, readonly, copy) NSArray<id <MPTransitAgency>> * _Nonnull agencies;
/// The color commonly used in signage for this transit line. The color will be specified as a hex string such as: #FF0033.
@property (nonatomic, readonly, copy) NSString * _Nonnull color;
/// URL for the icon associated with this line.
@property (nonatomic, readonly, copy) NSString * _Nonnull icon;
/// Name contains the full name of this transit line. eg. “7 Avenue Express”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The short name of this transit line. This will normally be a line number, such as “M7” or “355”.
@property (nonatomic, readonly, copy) NSString * _Nonnull short_name;
/// Color of text commonly used for signage of this line. The color will be specified as a hex string.
@property (nonatomic, readonly, copy) NSString * _Nonnull text_color;
/// URL for this transit line as provided by the transit agency.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// Type of vehicle used on this line. This may include the following properties:
@property (nonatomic, readonly, strong) id <MPTransitVehicle> _Nonnull vehicle;
@end


/// Transit stop information.
SWIFT_PROTOCOL("_TtP11MapsIndoors13MPTransitStop_")
@protocol MPTransitStop
/// The location of the transit station/stop, represented as a lat and lng field.
@property (nonatomic, readonly, strong) id <MPRouteCoordinate> _Nonnull location;
/// The name of the transit station/stop. eg. “Union Square”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end


/// Transit time information.
SWIFT_PROTOCOL("_TtP11MapsIndoors13MPTransitTime_")
@protocol MPTransitTime
/// The time specified as a string. The time is displayed in the time zone of the transit stop.
@property (nonatomic, readonly, copy) NSString * _Nullable text;
/// Time zone of this stop/station. The value is the name of the time zone as defined in the IANA Time Zone Database, e.g. <code>"America/New_York"</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable time_zone;
/// The time specified as Unix time, or seconds since midnight, January 1, 1970 UTC.
@property (nonatomic, readonly, strong) NSNumber * _Nullable value;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors16MPTransitVehicle_")
@protocol MPTransitVehicle
/// The URL for an icon associated with this vehicle type.
@property (nonatomic, readonly, copy) NSString * _Nullable icon;
/// The URL for the icon associated with this vehicle type, based on the local transport signage.
@property (nonatomic, readonly, copy) NSString * _Nullable local_icon;
/// The name of the vehicle on this line. eg. `Subway.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The type of vehicle that runs on this line. See the Vehicle Type documentation for a complete list of supported values.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@end

typedef SWIFT_ENUM(NSInteger, MPTravelMode, open) {
  MPTravelModeUnknown = 0,
  MPTravelModeWalking = 1,
  MPTravelModeBicycling = 2,
  MPTravelModeDriving = 3,
  MPTravelModeTransit = 4,
};


SWIFT_PROTOCOL("_TtP11MapsIndoors6MPType_")
@protocol MPType
/// Get the Display Rule assigned to this Location Type.
@property (nonatomic, strong) MPDisplayRule * _Nullable displayRule;
/// Dictionary of custom fields.
@property (nonatomic, copy) NSDictionary<NSString *, id <MPLocationField>> * _Nullable fields;
/// Location Type name.
@property (nonatomic, copy) NSString * _Nullable name;
/// Get restrictions for Type. Locations of this Type is restricted to this set of app user roles.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable restrictions;
/// Location Type translated name. May be nil if not defined in the CMS.
@property (nonatomic, copy) NSString * _Nullable translatedName;
@end


SWIFT_CLASS("_TtC11MapsIndoors10MPUserRole")
@interface MPUserRole : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userRoleId;
@property (nonatomic, readonly, copy) NSString * _Nonnull userRoleName;
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The venue model holds data about the buildings and floors in a venue, plus additional meta-data.
SWIFT_PROTOCOL("_TtP11MapsIndoors7MPVenue_")
@protocol MPVenue <MPEntity>
/// Get venue administrative id.
@property (nonatomic, readonly, copy) NSString * _Nullable administrativeId;
/// Venue anchor point.
@property (nonatomic, readonly, strong) MPPoint * _Nullable anchor;
/// Get the geographic bounding box for the venue.
@property (nonatomic, readonly, strong) MPGeoBounds * _Nonnull boundingBox;
/// Container array for buildings in this venue. Note that this array are not populated initially. <code>MPMapControl</code> will populate this for the active venue.
@property (nonatomic, readonly, copy) NSArray<id <MPBuilding>> * _Nullable buildings;
/// Venue default floor.
@property (nonatomic, readonly, strong) NSNumber * _Nullable defaultFloor;
/// Get a default style. If none is set, it will be the first string value in the list of map styles.
@property (nonatomic, readonly, strong) id <MPMapStyle> _Nullable defaultStyle;
/// Array of entry points in this venue.
@property (nonatomic, readonly, copy) NSArray<MPPoint *> * _Nullable entryPoints;
/// External id.
@property (nonatomic, readonly, copy) NSString * _Nullable externalId;
/// The polygon geometry describing the Venue outline.
@property (nonatomic, readonly, strong) MPPolygonGeometry * _Nullable geometry;
/// Route network/graph identifier for the given venue.
@property (nonatomic, readonly, copy) NSString * _Nullable graphId;
/// Does the venue have an active route graph?
@property (nonatomic, readonly) BOOL hasGraph;
/// Venue name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Dictionary of custom properties.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MPLocationField>> * _Nullable properties;
/// Solution id.
@property (nonatomic, readonly, copy) NSString * _Nullable solutionId;
/// Array of possible map styles.
@property (nonatomic, readonly, copy) NSArray<id <MPMapStyle>> * _Nullable styles;
/// The general url template to be used when creating floor layers for this venue. If used by this framework, the url string must have format <code>"prefix{param_1}infix{param_N}suffix"</code>, e.g. <code>"http://tiles.url.com/{floor}/{x}/{y}/{zoom}.png"</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable tilesUrl;
/// Venue id.
@property (nonatomic, readonly, copy) NSString * _Nullable venueId;
/// The VenueInfo from backend. Contains the name, aliases and properties for the venue.
@property (nonatomic, readonly, strong) MPEntityInfo * _Nonnull venueInfo;
@end


SWIFT_PROTOCOL("_TtP11MapsIndoors17MapsIndoorsShared_")
@protocol MapsIndoorsShared
/// Validate a MapsIndoors API key (requires online connectivity).
- (void)isApiKeyValidWithApiKey:(NSString * _Nonnull)apiKey completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Check whether offline data is available for a given MapsIndoors API key.
- (void)isOfflineDataAvailableWithApiKey:(NSString * _Nonnull)apiKey completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Load a MapsIndoors solution using an API key.
- (void)loadWithApiKey:(NSString * _Nonnull)apiKey completionHandler:(void (^ _Nonnull)(enum MPError))completionHandler;
/// Reload an already loaded MapsIndoors solution.
- (void)synchronizeWithCompletionHandler:(void (^ _Nonnull)(enum MPError))completionHandler;
/// Close the MapsIndoors SDK (clears the internal state of the SDK).
- (void)shutdown;
/// Fetch authentication details using MapsIndoors API key.
- (void)fetchAuthDetailsWithCompletionHandler:(void (^ _Nonnull)(id <MPAuthDetails> _Nullable, NSError * _Nullable))completionHandler;
/// Ready flag, indicating whether the SDK is loaded correctly and ready for use.
@property (nonatomic, readonly) BOOL ready;
/// Returns the currently set MapsIndoors api key.
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// Returns the solution object for the currently loaded MapsIndoors solution.
@property (nonatomic, readonly, strong) id <MPSolution> _Nullable solution;
/// Get or set the current language code (Uses the two-letter language code ISO 639-1).
@property (nonatomic, copy) NSString * _Nonnull language;
/// Get the list of available user roles in the current solution.
@property (nonatomic, readonly, copy) NSArray<MPUserRole *> * _Nonnull availableUserRoles;
/// Get or set the current list of applied user roles.
@property (nonatomic, copy) NSArray<MPUserRole *> * _Nonnull userRoles;
/// The authentication token to use when using MapsIndoors SSO.
@property (nonatomic, copy) NSString * _Nullable authToken;
/// Disable or enable anonymous SDK feature usage logging (enabled by default).
@property (nonatomic) BOOL eventLoggingDisabled;
/// Dataset cache manager.
@property (nonatomic, readonly, strong) id <MPDataSetCacheManager> _Nonnull datasetCacheManager;
/// The image provider that MapsIndoors should use when image ressources are needed.
@property (nonatomic, readonly, strong) id <MPImageProviderProtocol> _Nonnull imageProvider;
/// Get the MPLocation with a given location id - if one exists.
- (id <MPLocation> _Nullable)locationWithLocationId:(NSString * _Nonnull)locationId SWIFT_WARN_UNUSED_RESULT;
/// Get the Locations that have the provided external IDs associated.
/// Multiple Locations may have the same external ID associated, so a request with e.g. two external IDs may return more than two Locations.
- (NSArray<id <MPLocation>> * _Nonnull)locationsWithExternalIds:(NSArray<NSString *> * _Nonnull)externalIds SWIFT_WARN_UNUSED_RESULT;
/// Search for MPLocations using MPQuery and/or MPFilter.
- (void)locationsWithQuery:(MPQuery * _Nullable)query filter:(MPFilter * _Nullable)filter completionHandler:(void (^ _Nonnull)(NSArray<id <MPLocation>> * _Nonnull))completionHandler;
/// App configuration data.
- (void)appDataWithCompletionHandler:(void (^ _Nonnull)(id <MPAppConfig> _Nullable))completionHandler;
/// Categories.
- (void)categoriesWithCompletionHandler:(void (^ _Nonnull)(NSArray<id <MPDataField>> * _Nonnull))completionHandler;
/// Get all venues.
- (void)venuesWithCompletionHandler:(void (^ _Nonnull)(NSArray<id <MPVenue>> * _Nonnull))completionHandler;
/// Get the venue with a given id.
- (void)venueWithId:(NSString * _Nonnull)id completionHandler:(void (^ _Nonnull)(id <MPVenue> _Nullable))completionHandler;
/// Get all buildings.
- (void)buildingsWithCompletionHandler:(void (^ _Nonnull)(NSArray<id <MPBuilding>> * _Nonnull))completionHandler;
/// Get the building with a given id.
- (void)buildingWithId:(NSString * _Nonnull)id completionHandler:(void (^ _Nonnull)(id <MPBuilding> _Nullable))completionHandler;
/// Get a buildings which lies within the given bounds.
- (void)buildingInBounds:(MPGeoBounds * _Nonnull)bounds completionHandler:(void (^ _Nonnull)(id <MPBuilding> _Nullable))completionHandler;
/// Get the display rule for a given MPLocation.
- (MPDisplayRule * _Nullable)displayRuleForLocation:(id <MPLocation> _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
/// Get the display rule for a given type.
- (MPDisplayRule * _Nullable)displayRuleForType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Get display rules used for various general styling (e.g. building outline).
- (MPDisplayRule * _Nullable)displayRuleForDisplayRuleType:(enum MPDisplayRuleType)displayRuleType SWIFT_WARN_UNUSED_RESULT;
/// Set and apply a display rule for the given MPLocation.
- (void)setWithDisplayRule:(MPDisplayRule * _Nonnull)displayRule location:(id <MPLocation> _Nonnull)location;
/// Get a <code>MPDirectionsService</code> to calculate a route between Locations.
@property (nonatomic, readonly, strong) id <MPDirectionsService> _Nonnull directionsService;
/// Get a <code>MPBookingService</code> to perform bookings in the booking system configured in the MapsIndoors CMS.
@property (nonatomic, readonly, strong) id <MPBookingService> _Nonnull bookingService;
@end


@interface NSString (SWIFT_EXTENSION(MapsIndoors))
- (enum MPLocationBaseType)as_MPLocationBaseType SWIFT_WARN_UNUSED_RESULT;
@end



#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
